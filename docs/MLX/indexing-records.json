[
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DeviceType\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/CustomStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/suffix(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.suffix(_:). ",
    "summary" : "Inherited from Collection.suffix(_:).",
    "title" : "suffix(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/subscript(_:)-7bphj"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "subscript(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ComplexModule\/Complex\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int32\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/int8"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.int8"
  },
  {
    "headings" : [
      "Installation",
      "Running From Command Line",
      "Building",
      "The file “kernels” couldn’t be opened …",
      "received multiple target ended messages for target ID …",
      "Porting Python Code"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/troubleshooting"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Help with problems you might run into. Installation See Installation for more information.  If you use Xcode or SwiftPM to reference the package on github.com there should be no manual steps. If you clone the mlx-swift repository yourself, e.g. in order to work on the implementation please be aware that it uses git submodules. When you clone the repository you must give an argument to check out the submodules at the same time:  If you have already cloned the repository you can use this command to force the submodules to update:  Running From Command Line MLX requires metal shaders from the Cmlx framework – these are not usable from command line tools unless DYLD_FRAMEWORK_PATH makes them visible. MLX is built on top of the mlx C++ library packaged in the Cmlx swift package.  Cmlx produces a bundle called mlx-swift_Cmlx.bundle which contains the compiled metal shaders. If you build a command line tool and run it from Xcode, the DYLD_FRAMEWORK_PATH is set so that this bundle is found. If you want to run the same command from the shell you must manually set the DYLD_FRAMEWORK_PATH to the build directory. Note: applications will link the MLX and Cmlx libraries which will automatically provide access to the metal libraries as a resource of your application. Building Specific build issues you may encounter. The file “kernels” couldn’t be opened … This message comes from part of the build process that prepares the metal kernels. This may mean that the kernels directory in Source\/Cmlx\/mlx\/mlx\/backend\/metal\/kernels does not exist.  In particular it may mean that the git submodules were not checked out – see “Installation” above. received multiple target ended messages for target ID … If you receive a message like this:  There are a few approaches that have been observed to work around the issue: wait a few seconds and try building again quit and restart xcode clean the build folder and rebuild use Xcode 15.3 beta 2 or later Porting Python Code See Converting From Python for examples and information about symbols changes from python to swift.",
    "summary" : "Help with problems you might run into.",
    "title" : "Troubleshooting"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt32\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt64\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/argPartition(_:kth:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the indices that partition the flattened array.  input array element index at the kth position in the output will give the sorted position.  All indices before thekth position will be of elements less than or equal to the element at the kth index and all indices after will be elemenents greater than or equal to the element at the kth position. stream or device to evaluate on Discussion The ordering of the elements within a partition in given by the indices is undefined. See Also Indexes argPartition(_:kth:axis:stream:) partitioned(_:kth:axis:stream:)",
    "summary" : "Returns the indices that partition the flattened array.",
    "title" : "argPartition(_:kth:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/grad(_:argumentNumbers:)-5va2g"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "grad(_:argumentNumbers:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/eye(_:m:k:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create an identity matrix or a general diagonal matrix.  number of rows in the output number of columns in the output – equal to n if not specified index of the diagonal data type of the output array stream or device to evaluate on Discussion Example:  See Also Initialization identity(_:type:stream:)",
    "summary" : "Create an identity matrix or a general diagonal matrix.",
    "title" : "eye(_:m:k:type:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Float\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int8\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int8\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/withContiguousStorageIfAvailable(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.withContiguousStorageIfAvailable(_:). ",
    "summary" : "Inherited from Sequence.withContiguousStorageIfAvailable(_:).",
    "title" : "withContiguousStorageIfAvailable(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/equal(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise equality.  the left hand side array the right hand side array stream or device to evaluate on Discussion Equality comparison on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators",
    "summary" : "Element-wise equality.",
    "title" : "equal(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/starts(with:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.starts(with:by:). ",
    "summary" : "Inherited from Sequence.starts(with:by:).",
    "title" : "starts(with:by:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/allClose(_:rtol:atol:equalNaN:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Approximate comparison of two arrays.  array to compare to relative tolerance (see discussion) absolute tolerance (see discussion) if true treat NaN values as equal to each other stream or device to evaluate on Discussion The arrays are considered equal if:  Note: unlike arrayEqual(_:equalNAN:stream:), this function supports Numpy Style Broadcasting. For example:  See Also Logical Operators arrayEqual(_:equalNAN:stream:) arrayEqual(_:_:equalNAN:stream:)",
    "summary" : "Approximate comparison of two arrays.",
    "title" : "allClose(_:rtol:atol:equalNaN:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt16"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "UInt16"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/argMin(_:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Indices of the minimum value over the entire array.  input array if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Indexes argMin(_:axis:keepDims:stream:) argMax(_:axis:keepDims:stream:) argMin(axis:keepDims:stream:)",
    "summary" : "Indices of the minimum value over the entire array.",
    "title" : "argMin(_:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ComplexModule\/Complex\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/cumprod(_:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative product of the elements over the flattened array.  Discussion  See Also Cumulative Operations cumprod(_:axis:reverse:inclusive:stream:) cumprod(axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative product of the elements over the flattened array.",
    "title" : "cumprod(_:reverse:inclusive:stream:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ScalarOrArray\/asMLXArray(dtype:)-v238"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Convert to MLXArray using the optional suggested DType.  Discussion If the receiver is a scalar this should consider the dtype when producing an MLXArray.  For example:  See also toArrays(_:_:) (internal).",
    "summary" : "Convert to MLXArray using the optional suggested DType.",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/.!=(_:_:)-gkdj"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise not equal with a ScalarOrArray (scalar) argument.  See Also Arithmetic .!=(_:_:)",
    "summary" : "Element-wise not equal with a ScalarOrArray (scalar) argument.",
    "title" : ".!=(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/max(_:axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A max reduction over the given axis.  input array axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions max(_:axes:keepDims:stream:) max(_:keepDims:stream:) max(axes:keepDims:stream:)",
    "summary" : "A max reduction over the given axis.",
    "title" : "max(_:axis:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/forEach(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.forEach(_:). ",
    "summary" : "Inherited from Sequence.forEach(_:).",
    "title" : "forEach(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/*(_:_:)-1z2ck"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise multiplication.  Discussion Multiply two arrays with Numpy Style Broadcasting. For example:  See Also Arithmetic multiply(_:_:stream:) matmul(_:stream:) matmul(_:_:stream:)",
    "summary" : "Element-wise multiplication.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [
      "Overview",
      "Scalars",
      "Arrays"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/broadcasting"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "How different size arrays can be used together. Overview MLX uses Numpy style broadcasting: Numpy Documentation Here is a brief excerpt on how numpy describes this: The term broadcasting describes how NumPy treats arrays with different shapes during arithmetic operations. Subject to certain constraints, the smaller array is “broadcast” across the larger array so that they have compatible shapes. Broadcasting provides a means of vectorizing array operations so that looping occurs in C instead of Python. It does this without making needless copies of data and usually leads to efficient algorithm implementations. There are, however, cases where broadcasting is a bad idea because it leads to inefficient use of memory that slows computation. Let’s consider some examples using an array like this:  giving us this structure:  Scalars To add 1 to each value in the array we can simply write:  giving us:  This uses +(_:_:) which uses ScalarOrArray to automatically convert scalar values into MLXArray. A scalar can be broadcast to any shape array:  the scalar is repeated for each element in the array. Conceptually the scalar is converted into an array of the same shape and then added:  Broadcasting allows a much more efficient implementation where the scalar may simply be reused for ever element in the first array. Arrays Array broadcasting is similar to scalar broadcasting but it requires compatible shapes.\nGoing from right to left two shapes are compatible for broadcasting if any of these conditions are true: the dimensions are equal one of the dimensions is 1 or is missing (fewer dimensions) If the arrays have different number of dimensions, the result will have the same number of dimensions as the array with the most dimensions.  The resulting shape will have the max of the two matching dimensions. For example: ",
    "summary" : "How different size arrays can be used together.",
    "title" : "Numpy Style Broadcasting"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/Updatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Updatable Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/logSumExp(axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A log-sum-exp reduction over the given axis.  axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion The log-sum-exp reduction is a numerically stable version of:  See Also Reduction Functions logSumExp(axes:keepDims:stream:) logSumExp(keepDims:stream:) logSumExp(_:axes:keepDims:stream:)",
    "summary" : "A log-sum-exp reduction over the given axis.",
    "title" : "logSumExp(axis:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ComplexModule\/Complex"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "Complex"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/size"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Total number of elements in the array  Discussion ",
    "summary" : "Total number of elements in the array",
    "title" : "size"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/cummax(reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative maximum of the elements over the flattened array.  Discussion  See Also Cumulative Operations cummax(axis:reverse:inclusive:stream:) cummax(_:axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative maximum of the elements over the flattened array.",
    "title" : "cummax(reverse:inclusive:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(converting:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of MLXArray from an array of Double values with an optional shape.  Discussion Note: this converts the types to Float, which is a type representable in MLXArray  See Also Initialization",
    "summary" : "Initalizer allowing creation of MLXArray from an array of Double values with an optional shape.",
    "title" : "init(converting:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/linspace(_:_:count:stream:)-7m7eg"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Generate num evenly spaced numbers over interval [start, stop] for BinaryInteger.  start value stop value number of samples stream or device to evaluate on Discussion Example:  See Also Initialization linspace(_:_:count:stream:)",
    "summary" : "Generate num evenly spaced numbers over interval [start, stop] for BinaryInteger.",
    "title" : "linspace(_:_:count:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/log2(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise base-2 logarithm.  See Also Arithmetic log(stream:) log10(stream:) log1p(stream:) log2(_:stream:)",
    "summary" : "Element-wise base-2 logarithm.",
    "title" : "log2(stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/**(_:_:)-8xxt3"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise power operation.  Discussion Raise the elements of lhs to the powers in elements of rhs with Numpy Style Broadcasting. For example:  See Also Arithmetic pow(_:stream:) pow(_:_:stream:) pow(_:_:stream:)",
    "summary" : "Element-wise power operation.",
    "title" : "**(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/shuffled()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.shuffled(). ",
    "summary" : "Inherited from Sequence.shuffled().",
    "title" : "shuffled()"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/\/(_:_:)-24oh0"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise division with a ScalarOrArray (scalar) argument.  See Also Arithmetic",
    "summary" : "Element-wise division with a ScalarOrArray (scalar) argument.",
    "title" : "\/(_:_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:)-96nyv"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initialize with the given +1 context (transfer ownership).  Discussion This initializer is for Cmlx interoperation.",
    "summary" : "Initialize with the given +1 context (transfer ownership).",
    "title" : "init(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/repeat(_:count:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Repeat a flattened array along axis 0.  array to repeat number of times to repeat stream or device to evaluate on Discussion Example:  See Also Initialization repeat(_:count:axis:stream:) full(_:values:stream:)",
    "summary" : "Repeat a flattened array along axis 0.",
    "title" : "repeat(_:count:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/greater(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise greater than.  the left hand side array the right hand side array stream or device to evaluate on Discussion Greater than on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators",
    "summary" : "Element-wise greater than.",
    "title" : "greater(_:_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/clip(_:max:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Clip the values of the array up to the given maximum.  input array maximum value (must broadcast to array) stream or device to evaluate on See Also Arithmetic clip(_:min:max:stream:)",
    "summary" : "Clip the values of the array up to the given maximum.",
    "title" : "clip(_:max:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/product(_:axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A product reduction over the given axes.  input array axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions product(_:axis:keepDims:stream:) product(_:keepDims:stream:) product(axes:keepDims:stream:)",
    "summary" : "A product reduction over the given axes.",
    "title" : "product(_:axes:keepDims:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/floor(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise floor.  See Also Arithmetic round(_:decimals:stream:) floorDivide(_:_:stream:) ceil(_:stream:) floor(stream:)",
    "summary" : "Element-wise floor.",
    "title" : "floor(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(arrayLiteral:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of 1d MLXArray from an array literal.  Discussion  This is convenient for methods that have MLXArray parameters:  See Also Initialization",
    "summary" : "Initalizer allowing creation of 1d MLXArray from an array literal.",
    "title" : "init(arrayLiteral:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/log1p(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise natural log of one plus the array.  See Also Arithmetic log(_:stream:) log2(_:stream:) log10(_:stream:) log1p(stream:)",
    "summary" : "Element-wise natural log of one plus the array.",
    "title" : "log1p(_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/asin(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise inverse sine.  input array stream or device to evaluate on See Also Arithmetic sin(_:stream:)",
    "summary" : "Element-wise inverse sine.",
    "title" : "asin(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DeviceType\/gpu"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DeviceType.gpu"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/zeros(_:dtype:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array of zeros with a given DType  desired shape dtype of the values stream or device to evaluate on Discussion Example:  See Also Initialization zeros(like:stream:) ones(_:type:stream:)",
    "summary" : "Construct an array of zeros with a given DType",
    "title" : "zeros(_:dtype:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/tril(_:k:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Zeros the array above the given diagonal.  input array the diagonal of the 2-D array stream or device to evaluate on See Also triu(_:k:stream:)",
    "summary" : "Zeros the array above the given diagonal.",
    "title" : "tril(_:k:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/prefix(while:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.prefix(while:). ",
    "summary" : "Inherited from Sequence.prefix(while:).",
    "title" : "prefix(while:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(real:imaginary:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create a DType.complex64 scalar.  real part imaginary part",
    "summary" : "Create a DType.complex64 scalar.",
    "title" : "init(real:imaginary:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/eval(_:)-91pbd"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Evaluate one or more MLXArray  See Also Lazy Evaluation",
    "summary" : "Evaluate one or more MLXArray",
    "title" : "eval(_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/loadArray(url:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Load array from a binary file in .npyformat.  URL of file to load stream or device to evaluate on See Also loadArrays(url:stream:) save(array:url:stream:) save(arrays:url:stream:)",
    "summary" : "Load array from a binary file in .npyformat.",
    "title" : "loadArray(url:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/sorted(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.sorted(by:). ",
    "summary" : "Inherited from Sequence.sorted(by:).",
    "title" : "sorted(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/filter(_:)-57rkj"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.filter(_:). ",
    "summary" : "Inherited from Sequence.filter(_:).",
    "title" : "filter(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ComplexModule\/Complex\/asMLXArray(dtype:)-2x838"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/sqrt(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise square root  See Also Arithmetic sqrt(stream:)",
    "summary" : "Element-wise square root",
    "title" : "sqrt(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/repeat(_:count:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Repeat a flattened array along axis 0.  array to repeat number of times to repeat stream or device to evaluate on Discussion Example:  See Also Initialization repeat(_:count:axis:stream:) full(_:values:stream:)",
    "summary" : "Repeat a flattened array along axis 0.",
    "title" : "repeat(_:count:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/argMin(keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Indices of the minimum value over the entire array.  if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Indexes argMin(axis:keepDims:stream:) argMax(axis:keepDims:stream:) argMin(_:axis:keepDims:stream:)",
    "summary" : "Indices of the minimum value over the entire array.",
    "title" : "argMin(keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/bool"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.bool"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/compile(inputs:outputs:_:)-5mp7m"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Overload of compile(inputs:outputs:_:) that takes a two MLXArray and produces a single MLXArray.  See Also Compilation compile(inputs:outputs:_:)",
    "summary" : "Overload of compile(inputs:outputs:_:) that takes a two MLXArray and produces a single MLXArray.",
    "title" : "compile(inputs:outputs:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/min(keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A min reduction over the entire array.  if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions min(axes:keepDims:stream:) min(axis:keepDims:stream:) min(_:axes:keepDims:stream:)",
    "summary" : "A min reduction over the entire array.",
    "title" : "min(keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/compile(inputs:outputs:_:)-96gqs"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a compiled function that produces the same output as f().  input state output state function to compile Return Value a new function that produces the same output as f() Discussion Any mutable state must be provided via the state parameter – see Compilation for more information. See Also Compilation compile(inputs:outputs:_:) compile(inputs:outputs:_:)",
    "summary" : "Returns a compiled function that produces the same output as f().",
    "title" : "compile(inputs:outputs:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/subscript(_:)-5jt9z"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.subscript(_:). ",
    "summary" : "Inherited from Collection.subscript(_:).",
    "title" : "subscript(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt64\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt8"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "UInt8"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/elementsEqual(_:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.elementsEqual(_:by:). ",
    "summary" : "Inherited from Sequence.elementsEqual(_:by:).",
    "title" : "elementsEqual(_:by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/withContiguousStorageIfAvailable(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.withContiguousStorageIfAvailable(_:). ",
    "summary" : "Inherited from Sequence.withContiguousStorageIfAvailable(_:).",
    "title" : "withContiguousStorageIfAvailable(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Float\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/compare(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.compare(_:_:). ",
    "summary" : "Inherited from Sequence.compare(_:_:).",
    "title" : "compare(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/init(values:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initialize with a dictionary of NestedItem. ",
    "summary" : "Initialize with a dictionary of NestedItem.",
    "title" : "init(values:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Float16\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/split(_:parts:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Split an array into equal size pieces along a given axis.  input array array is split into that many sections of equal size. It is a fatal error if this is not possible axis to split along Discussion Splits the array into equal size pieces along a given axis and returns an array of MLXArray:  See Also Shapes split(_:indices:axis:stream:) split(parts:axis:stream:)",
    "summary" : "Split an array into equal size pieces along a given axis.",
    "title" : "split(_:parts:axis:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/unflattened(_:)-4p8bn"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Convert a flattened dictionary back into a NestedDictionary structure.  See Also flattened(prefix:) unflattened(_:)",
    "summary" : "Convert a flattened dictionary back into a NestedDictionary structure.",
    "title" : "unflattened(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int64"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "Int64"
  },
  {
    "headings" : [
      "Overview",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Backing storage for NestedDictionary.  Overview NestedItem holds the array \/ dictionary \/ value structure contained in a NestedDictionary. Typically creation of these values is handled by code that returns NestedDictionary but these are used when traversing the structure manually. See Also NestedDictionary mapValues(transform:) flattened(prefix:) unflattened(_:)",
    "summary" : "Backing storage for NestedDictionary.",
    "title" : "NestedItem"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ConvolveMode"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Mode for convolve(_:_:mode:stream:) ",
    "summary" : "Mode for convolve(_:_:mode:stream:)",
    "title" : "ConvolveMode"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/grad(_:argumentNumbers:)-2ictk"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "grad(_:argumentNumbers:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:)-6zp01"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from a Float.  Discussion  See Also Initialization",
    "summary" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from a Float.",
    "title" : "init(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/asStrided(_:_:strides:offset:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create a view into the array with the given shape and strides.  input array shape of the resulting array.  If not specified it will keep the same shape stream or device to evaluate on Discussion The resulting array will always be as if the provided array was row contiguous regardless of the provided arrays storage order and current strides. Caution! This function should be used with caution as it changes the shape and strides of the array directly. This can lead to the resulting array pointing to invalid memory locations which can result into crashes. Here are two examples of use:  and:  See Also Shapes",
    "summary" : "Create a view into the array with the given shape and strides.",
    "title" : "asStrided(_:_:strides:offset:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt8\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/value(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "NestedItem.value(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:)-9iiz7"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from a Bool.  Discussion  See Also Initialization",
    "summary" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from a Bool.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/distance(from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.distance(from:to:). ",
    "summary" : "Inherited from Collection.distance(from:to:).",
    "title" : "distance(from:to:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/sum(_:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Sum reduce the array over all axes.  input array if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions sum(_:axes:keepDims:stream:) sum(_:axis:keepDims:stream:) sum(axes:keepDims:stream:)",
    "summary" : "Sum reduce the array over all axes.",
    "title" : "sum(_:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int16"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "Int16"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/drop(while:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.drop(while:). ",
    "summary" : "Inherited from Sequence.drop(while:).",
    "title" : "drop(while:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/rsqrt(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise reciprocal and square root.  See Also Arithmetic sqrt(_:stream:)",
    "summary" : "Element-wise reciprocal and square root.",
    "title" : "rsqrt(stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/min(_:axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A min reduction over the given axis.  input array axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions min(_:axes:keepDims:stream:) min(_:keepDims:stream:) min(axes:keepDims:stream:)",
    "summary" : "A min reduction over the given axis.",
    "title" : "min(_:axis:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Device\/init(_:index:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "init(_:index:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/compactMap(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.compactMap(_:). ",
    "summary" : "Inherited from Sequence.compactMap(_:).",
    "title" : "compactMap(_:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/subscript(_:stream:)-od5g"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Single index subscript.  Overview This provides access to the given index on axis 0. ",
    "summary" : "Single index subscript.",
    "title" : "subscript(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/filter(_:)-7p1dh"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "17.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "14.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "17.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.filter(_:). ",
    "summary" : "Inherited from Sequence.filter(_:).",
    "title" : "filter(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/ctx"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Internal pointer to the mlx-c wrapper on mlx::core::array, used with Cmlx interop. ",
    "summary" : "Internal pointer to the mlx-c wrapper on mlx::core::array, used with Cmlx interop.",
    "title" : "ctx"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Device\/gpu"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "gpu"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ConvolveMode\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/square(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise square.  See Also Arithmetic square(stream:)",
    "summary" : "Element-wise square.",
    "title" : "square(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/lazy"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.lazy. ",
    "summary" : "Inherited from Sequence.lazy.",
    "title" : "lazy"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/.&&(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise logical and.  Discussion Logical and on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators",
    "summary" : "Element-wise logical and.",
    "title" : ".&&(_:_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/T"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transpose the dimensions of the array.  Discussion Cover for transposed(stream:)",
    "summary" : "Transpose the dimensions of the array.",
    "title" : "T"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/map(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.map(_:). ",
    "summary" : "Inherited from Sequence.map(_:).",
    "title" : "map(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/mean(axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A mean reduction over the given axis.  axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions mean(axes:keepDims:stream:) mean(keepDims:stream:) mean(_:axes:keepDims:stream:)",
    "summary" : "A mean reduction over the given axis.",
    "title" : "mean(axis:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/ones(like:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array of ones.  array to copy shape and dtype from stream or device to evaluate on Discussion Example:  See Also Initialization ones(_:type:stream:) zeros(_:type:stream:)",
    "summary" : "Construct an array of ones.",
    "title" : "ones(like:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/max(axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A max reduction over the given axis.  axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions max(axes:keepDims:stream:) max(keepDims:stream:) max(_:axes:keepDims:stream:)",
    "summary" : "A max reduction over the given axis.",
    "title" : "max(axis:keepDims:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/cos(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise cosine.  See Also Arithmetic cos(stream:)",
    "summary" : "Element-wise cosine.",
    "title" : "cos(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/\/(_:_:)-6ijef"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise division.  Discussion Divide two arrays with Numpy Style Broadcasting. For example:  See Also Arithmetic divide(_:_:stream:) floorDivide(_:_:stream:)",
    "summary" : "Element-wise division.",
    "title" : "\/(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/_(_:_:)-3ubwd"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise remainder of division.  Discussion Computes the remainder of dividing lhs with rhs with Numpy Style Broadcasting. For example:  See Also Arithmetic remainder(_:_:stream:)",
    "summary" : "Element-wise remainder of division.",
    "title" : "%(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/flattened(prefix:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a flattened representation of the structured contents as an array of key\/value tuples.  Discussion This is typically called via flattened(prefix:). See Also flattenedValues() unflattened(_:) flattened(prefix:) unflattened(_:) unflattened(_:)",
    "summary" : "Return a flattened representation of the structured contents as an array of key\/value tuples.",
    "title" : "flattened(prefix:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/subscript(_:)-6pveg"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.subscript(_:). ",
    "summary" : "Inherited from Collection.subscript(_:).",
    "title" : "subscript(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int8\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/makeIterator()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return an iterator along axis 0:  Discussion ",
    "summary" : "Return an iterator along axis 0:",
    "title" : "makeIterator()"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/sigmoid(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise logistic sigmoid.  input array stream or device to evaluate on Discussion For details, please see this documentation See Also Arithmetic",
    "summary" : "Element-wise logistic sigmoid.",
    "title" : "sigmoid(_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/squeezed(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Remove all length one axes from an array.  See Also Shapes squeezed(axes:stream:) squeezed(axis:stream:) squeezed(_:axes:stream:)",
    "summary" : "Remove all length one axes from an array.",
    "title" : "squeezed(stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/IntOrPair\/first"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "first"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/StreamOrDevice\/description"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomStringConvertible.description. ",
    "summary" : "Inherited from CustomStringConvertible.description.",
    "title" : "description"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/exp(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise exponential.  See Also Arithmetic exp(_:stream:)",
    "summary" : "Element-wise exponential.",
    "title" : "exp(stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/valueAndGrad(_:argumentNumbers:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "valueAndGrad(_:argumentNumbers:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/cummax(_:axis:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative maximum of the elements along the given axis.  Discussion  See Also Cumulative Operations cummax(_:reverse:inclusive:stream:) cummax(axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative maximum of the elements along the given axis.",
    "title" : "cummax(_:axis:reverse:inclusive:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/index(_:offsetBy:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.index(_:offsetBy:). ",
    "summary" : "Inherited from Collection.index(_:offsetBy:).",
    "title" : "index(_:offsetBy:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/subscript(_:stream:)-8a2s7"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "subscript(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/cummin(_:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative minimum of the elements over the flattened array.  Discussion  See Also Cumulative Operations cummin(_:axis:reverse:inclusive:stream:) cummin(axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative minimum of the elements over the flattened array.",
    "title" : "cummin(_:reverse:inclusive:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "Int"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt32"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "UInt32"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/round(decimals:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Round to the given number of decimals.  Discussion Roughly equivalent to:  See Also Arithmetic floor(stream:) round(_:decimals:stream:)",
    "summary" : "Round to the given number of decimals.",
    "title" : "round(decimals:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/first(where:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.first(where:). ",
    "summary" : "Inherited from Sequence.first(where:).",
    "title" : "first(where:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/linspace(_:_:count:stream:)-7vj0o"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Generate num evenly spaced numbers over interval [start, stop].  start value stop value number of samples stream or device to evaluate on Discussion Example:  See Also Initialization linspace(_:_:count:stream:)",
    "summary" : "Generate num evenly spaced numbers over interval [start, stop].",
    "title" : "linspace(_:_:count:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/floor(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise floor.  See Also Arithmetic round(decimals:stream:) floorDivide(_:stream:) floor(_:stream:)",
    "summary" : "Element-wise floor.",
    "title" : "floor(stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/expandedDimensions(axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Add a size one dimension at the given axis.  input array index of the inserted dimension stream or device to evaluate on See Also Shapes expandedDimensions(axes:stream:)",
    "summary" : "Add a size one dimension at the given axis.",
    "title" : "expandedDimensions(axis:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/IntOrPair\/init(_:)-78yd3"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "init(_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/argSort(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the indices that sort the array.  input array stream or device to evaluate on See Also Indexes argSort(_:axis:stream:)",
    "summary" : "Returns the indices that sort the array.",
    "title" : "argSort(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/pow(_:_:stream:)-8ie9c"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise power operation.  Discussion Raise the elements of self to the powers in elements of other with Numpy Style Broadcasting. For example:  See Also Arithmetic Arithmetic pow(_:stream:)",
    "summary" : "Element-wise power operation.",
    "title" : "pow(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/forEach(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.forEach(_:). ",
    "summary" : "Inherited from Sequence.forEach(_:).",
    "title" : "forEach(_:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/indexing"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Array subscripts. Overview MLXArray provides a number of subscript operators to provide access to the contents of an array. Here are several examples that read a region of the array to produce a new array:  The same operations can be used to assign with Numpy Style Broadcasting:  Numpy advanced indexing is also usable.  The simplest form allows using an MLXArray as indices (see Indexes):  More complex forms are also available if multiple arrays are passed. In python you can index using slices with strides, e.g. to access only the even numbered elements:  You can accomplish something similar with the swift API: ",
    "summary" : "Array subscripts.",
    "title" : "Indexing"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/int32"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.int32"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/quantizedMatmul(_:_:scales:biases:transpose:groupSize:bits:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Perform the matrix multiplication with the quantized matrix w. The quantization uses one floating point scale and bias per group_size of elements. Each element in w takes bits bits and is packed in an unsigned 32 bit integer.  See Also dequantized(_:scales:biases:groupSize:bits:stream:) quantized(_:groupSize:bits:stream:)",
    "summary" : "Perform the matrix multiplication with the quantized matrix w. The quantization uses one floating point scale and bias per group_size of elements. Each element in w takes bits bits and is packed in an unsigned 32 bit integer.",
    "title" : "quantizedMatmul(_:_:scales:biases:transpose:groupSize:bits:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/eye(_:m:k:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create an identity matrix or a general diagonal matrix.  number of rows in the output number of columns in the output – equal to n if not specified index of the diagonal data type of the output array stream or device to evaluate on Discussion Example:  See Also Initialization identity(_:type:stream:)",
    "summary" : "Create an identity matrix or a general diagonal matrix.",
    "title" : "eye(_:m:k:type:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/stacked(_:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Stacks the arrays along a new axis.  See Also Shapes",
    "summary" : "Stacks the arrays along a new axis.",
    "title" : "stacked(_:axis:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:)-6iii5"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create a DType.complex64 scalar from Complex<Float>. ",
    "summary" : "Create a DType.complex64 scalar from Complex<Float>.",
    "title" : "init(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/cummin(axis:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative minimum of the elements along the given axis.  Discussion  See Also Cumulative Operations cummin(reverse:inclusive:stream:) cummin(_:axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative minimum of the elements along the given axis.",
    "title" : "cummin(axis:reverse:inclusive:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt32\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/description"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from IndentedDescription.description. ",
    "summary" : "Inherited from IndentedDescription.description.",
    "title" : "description"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/starts(with:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.starts(with:by:). ",
    "summary" : "Inherited from Sequence.starts(with:by:).",
    "title" : "starts(with:by:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/.__(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise logical or.  Discussion Logical or on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators",
    "summary" : "Element-wise logical or.",
    "title" : ".||(_:_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/log1p(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise natural log of one plus the array.  See Also Arithmetic log(stream:) log2(stream:) log10(stream:) log1p(_:stream:)",
    "summary" : "Element-wise natural log of one plus the array.",
    "title" : "log1p(stream:)"
  },
  {
    "headings" : [
      "Specifying the Stream"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/using-streams"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Controlling where your computations are evaluated. Specifying the Stream All operations (including random number generation) take an optional argument stream. The stream specifies which Stream the operation should run on. If the stream is unspecified then the operation is run on the default stream of the default device: defaultStream(_:).  The stream can also be a Device (e.g. stream: .cpu) in which case the operation is run on the default stream of the provided device. For example:  The parameter is of type StreamOrDevice and can be initialized with a stream, device, or some defaults like gpu. Read more in Unified Memory.",
    "summary" : "Controlling where your computations are evaluated.",
    "title" : "Using Streams"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/lazy"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.lazy. ",
    "summary" : "Inherited from Sequence.lazy.",
    "title" : "lazy"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Device\/setDefault(device:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Set the default device.  Discussion For example:  By default this is gpu. See Also default",
    "summary" : "Set the default device.",
    "title" : "setDefault(device:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/compile(inputs:outputs:_:)-7qwto"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Overload of compile(inputs:outputs:_:) that takes a single MLXArray and produces a single MLXArray.  See Also Compilation compile(inputs:outputs:_:)",
    "summary" : "Overload of compile(inputs:outputs:_:) that takes a single MLXArray and produces a single MLXArray.",
    "title" : "compile(inputs:outputs:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt16\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/abs(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise absolute value.  input array stream or device to evaluate on See Also Arithmetic abs(stream:)",
    "summary" : "Element-wise absolute value.",
    "title" : "abs(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/argMin(axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Indices of the minimum values along the axis.  axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Indexes argMin(keepDims:stream:) argMax(axis:keepDims:stream:) argMin(_:axis:keepDims:stream:)",
    "summary" : "Indices of the minimum values along the axis.",
    "title" : "argMin(axis:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int16\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/acos(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise inverse cosine.  input array stream or device to evaluate on See Also Arithmetic cos(_:stream:)",
    "summary" : "Element-wise inverse cosine.",
    "title" : "acos(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/subscript(_:)-4t8fg"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.subscript(_:). ",
    "summary" : "Inherited from Collection.subscript(_:).",
    "title" : "subscript(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/asDictionary()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "asDictionary()"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/mean(_:axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A mean reduction over the given axis.  input array axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions mean(_:axes:keepDims:stream:) mean(_:keepDims:stream:) mean(axes:keepDims:stream:)",
    "summary" : "A mean reduction over the given axis.",
    "title" : "mean(_:axis:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/keys"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "keys"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt8\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/replacingValues(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a new NestedDictionary with the values replaced by a flat array of values.  See Also flattenedValues()",
    "summary" : "Return a new NestedDictionary with the values replaced by a flat array of values.",
    "title" : "replacingValues(with:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ones(_:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array of ones.  desired shape dtype of the values stream or device to evaluate on Discussion Example:  See Also Initialization ones(like:stream:) zeros(_:type:stream:)",
    "summary" : "Construct an array of ones.",
    "title" : "ones(_:type:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/atanh(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise inverse hyperbolic tangent.  input array stream or device to evaluate on See Also Arithmetic tanh(_:stream:)",
    "summary" : "Element-wise inverse hyperbolic tangent.",
    "title" : "atanh(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/cmlxDtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "cmlxDtype"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/valueAndGrad(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a function that computes the gradient and result of f, computing the gradient with respect to the NestedDictionary.  Discussion Note that this allows any parameters <T> s they will not be part of the gradient.",
    "summary" : "Returns a function that computes the gradient and result of f, computing the gradient with respect to the NestedDictionary.",
    "title" : "valueAndGrad(_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/StreamOrDevice\/default"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The default stream on the default device.  Discussion This will be gpu unless setDefault(device:) sets it otherwise.",
    "summary" : "The default stream on the default device.",
    "title" : "default"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/float16"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.float16"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Swift"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/clip(_:min:max:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Clip the values of the array between the given minimum and maximum.  input array minimum value (must broadcast to array) maximum value (must broadcast to array).  If omitted only the min will be honored. stream or device to evaluate on See Also Arithmetic clip(_:max:stream:)",
    "summary" : "Clip the values of the array between the given minimum and maximum.",
    "title" : "clip(_:min:max:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/broadcast(_:to:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Broadcast an array to the given shape.  input array shape to broadcast to See Also Numpy Style Broadcasting",
    "summary" : "Broadcast an array to the given shape.",
    "title" : "broadcast(_:to:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ComplexModule"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ComplexModule"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/mean(_:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A mean reduction over the entire array.  input array if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions mean(_:axes:keepDims:stream:) mean(_:axis:keepDims:stream:) mean(axes:keepDims:stream:)",
    "summary" : "A mean reduction over the entire array.",
    "title" : "mean(_:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/logSumExp(_:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A log-sum-exp reduction over the entire array.  input array if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion The log-sum-exp reduction is a numerically stable version of:  See Also Reduction Functions logSumExp(_:axes:keepDims:stream:) logSumExp(_:axis:keepDims:stream:) logSumExp(axes:keepDims:stream:)",
    "summary" : "A log-sum-exp reduction over the entire array.",
    "title" : "logSumExp(_:keepDims:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/log10(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise base-10 logarithm.  See Also Arithmetic log(stream:) log2(stream:) log1p(stream:) log10(_:stream:)",
    "summary" : "Element-wise base-10 logarithm.",
    "title" : "log10(stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/flatMap(_:)-1ghyp"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [

    ],
    "rawIndexableTextContent" : "Inherited from Sequence.flatMap(_:). ",
    "summary" : "Inherited from Sequence.flatMap(_:).",
    "title" : "flatMap(_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/reciprocal(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise reciprocal.  See Also Arithmetic reciprocal(_:stream:)",
    "summary" : "Element-wise reciprocal.",
    "title" : "reciprocal(stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/subscript(_:axis:stream:)-1jy5n"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "subscript(_:axis:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/min(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.min(by:). ",
    "summary" : "Inherited from Sequence.min(by:).",
    "title" : "min(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int64\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/._=(_:_:)-2a0s9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise less than or equal.  Discussion Less than or equal on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators lessEqual(_:_:stream:)",
    "summary" : "Element-wise less than or equal.",
    "title" : ".<=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt16\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/zeros(_:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array of zeros.  desired shape dtype of the values stream or device to evaluate on Discussion Example:  See Also Initialization zeros(like:stream:) ones(_:type:stream:)",
    "summary" : "Construct an array of zeros.",
    "title" : "zeros(_:type:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/contains(where:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.contains(where:). ",
    "summary" : "Inherited from Sequence.contains(where:).",
    "title" : "contains(where:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/sorted(using:)-2xway"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.sorted(using:). ",
    "summary" : "Inherited from Sequence.sorted(using:).",
    "title" : "sorted(using:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/zeros(like:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array of zeros.  array to copy shape and dtype from stream or device to evaluate on Discussion Example:  See Also Initialization zeros(_:type:stream:) ones(_:type:stream:)",
    "summary" : "Construct an array of zeros.",
    "title" : "zeros(like:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DeviceType\/hashValue"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from RawRepresentable.hashValue. ",
    "summary" : "Inherited from RawRepresentable.hashValue.",
    "title" : "hashValue"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/full(_:values:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array with the given value.  shape of the output array values to be bradcast into the array stream or device to evaluate on Discussion Constructs an array of size shape filled with vals. If vals is an :obj:array it must be Numpy Style Broadcasting to the given shape. Example:  See Also Initialization full(_:values:type:stream:) repeat(_:count:axis:stream:)",
    "summary" : "Construct an array with the given value.",
    "title" : "full(_:values:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ComplexModule\/Complex\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/IndentedDescription-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "IndentedDescription Implementations"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/cosh(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise hyperbolic cosine.  input array stream or device to evaluate on See Also Arithmetic cos(_:stream:)",
    "summary" : "Element-wise hyperbolic cosine.",
    "title" : "cosh(_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/variance(keepDims:ddof:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Compute the variance(s) over the given axes  if true keep the reduces axes as singleton dimensions the divisor to compute the variance is N - ddof See Also Reduction Functions variance(axes:keepDims:ddof:stream:) variance(axis:keepDims:ddof:stream:) variance(_:axes:keepDims:ddof:stream:)",
    "summary" : "Compute the variance(s) over the given axes",
    "title" : "variance(keepDims:ddof:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/unwrap()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the values contained inside as a type erased swift structure, e.g. normal Array and Dictionary. This is suitable for tests and debugging but should not be used in typical code. ",
    "summary" : "Return the values contained inside as a type erased swift structure, e.g. normal Array and Dictionary. This is suitable for tests and debugging but should not be used in typical code.",
    "title" : "unwrap()"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/logAddExp(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise log-add-exp.  the left hand side array the right hand side array stream or device to evaluate on Discussion This is a numerically stable log-add-exp of two arrays with numpy-style broadcasting semantics. Either or both input arrays can also be scalars. The computation is is a numerically stable version of log(exp(a) + exp(b)). See Also Arithmetic",
    "summary" : "Element-wise log-add-exp.",
    "title" : "logAddExp(_:_:stream:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/cumulative"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Operations that produce a cumulative result. Overview There are a number of functions that can produce a cumulative result.  For example:  These are available as both methods on MLXArray and free functions.  They each have options to: perform the computation along an axis or over the flattened array reverse the direction of cumulative computation",
    "summary" : "Operations that produce a cumulative result.",
    "title" : "Cumulative Operations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/randomElement(using:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.randomElement(using:). ",
    "summary" : "Inherited from Collection.randomElement(using:).",
    "title" : "randomElement(using:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/rsqrt(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise reciprocal and square root.  See Also Arithmetic rsqrt(stream:)",
    "summary" : "Element-wise reciprocal and square root.",
    "title" : "rsqrt(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/quantized(_:groupSize:bits:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Quantize the matrix w using bits bits per element.  Discussion Note, every group_size elements in a row of w are quantized together. Hence, number of columns of w should be divisible by group_size. In particular, the rows of w are divided into groups of size group_size which are quantized together. quantized currently only supports 2D inputs with dimensions which are multiples of 32 For details, please see this documentation See Also dequantized(_:scales:biases:groupSize:bits:stream:) quantizedMatmul(_:_:scales:biases:transpose:groupSize:bits:stream:)",
    "summary" : "Quantize the matrix w using bits bits per element.",
    "title" : "quantized(_:groupSize:bits:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Float\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Stream\/description"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomStringConvertible.description. ",
    "summary" : "Inherited from CustomStringConvertible.description.",
    "title" : "description"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int8\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/acosh(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise inverse hyperbolic cosine.  input array stream or device to evaluate on See Also Arithmetic cosh(_:stream:)",
    "summary" : "Element-wise inverse hyperbolic cosine.",
    "title" : "acosh(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Stream\/init()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "init()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/shuffled()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.shuffled(). ",
    "summary" : "Inherited from Sequence.shuffled().",
    "title" : "shuffled()"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DeviceType\/RawRepresentable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "RawRepresentable Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:)-10m"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from a HasDType value.  Discussion  See Also Initialization",
    "summary" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from a HasDType value.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int64\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int64\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/shuffled(using:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.shuffled(using:). ",
    "summary" : "Inherited from Sequence.shuffled(using:).",
    "title" : "shuffled(using:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/floorDivide(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise integer division..  Discussion Divide two arrays with Numpy Style Broadcasting. If either array is a floating point type then it is equivalent to calling floor(stream:) after \/. For example:  See Also Arithmetic floor(stream:) floorDivide(_:_:stream:)",
    "summary" : "Element-wise integer division..",
    "title" : "floorDivide(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/zeros(_:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array of zeros.  desired shape dtype of the values stream or device to evaluate on Discussion Example:  See Also Initialization zeros(like:stream:) ones(_:type:stream:)",
    "summary" : "Construct an array of zeros.",
    "title" : "zeros(_:type:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/mapValues(_:_:transform:)-8yhzk"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the values in the nested structure using the transform() function while simultaneously iterating the same structure in a second and third NestedDictionary.  Discussion This transforms all three values simultaneously and produces three new NestedDictionary conceptually somewhat like map(zip(i1, i2, i3)). The structure of the second and third NestedDictionary should be identical to the first but these exceptions are allowed: .none will match any value, e.g. you can iterate an empty second item arrays do not need to be the same length – the receiver’s length is matched dictionaries do not need to have the same keys – the receivers keys are matched See Also mapValues(_:_:_:) mapValues(_:transform:)",
    "summary" : "Transform the values in the nested structure using the transform() function while simultaneously iterating the same structure in a second and third NestedDictionary.",
    "title" : "mapValues(_:_:transform:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/save(array:url:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Save array to a binary file in .npyformat.  array to save URL of file to load stream or device to evaluate on See Also save(arrays:url:stream:) loadArray(url:stream:) loadArrays(url:stream:)",
    "summary" : "Save array to a binary file in .npyformat.",
    "title" : "save(array:url:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/transposed(axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transpose the dimensions of the array.  Discussion This swaps the position of the first dimension with the given axis. See Also Shapes transposed(axes:stream:) transposed(stream:) transposed(_:axes:stream:)",
    "summary" : "Transpose the dimensions of the array.",
    "title" : "transposed(axis:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Device\/init()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "init()"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Double"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "Double"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/CollectionElement"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "NestedDictionary.CollectionElement"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Array\/innerState()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Updatable.innerState(). ",
    "summary" : "Inherited from Updatable.innerState().",
    "title" : "innerState()"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/IntOrPair"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Parameter for convolutions allowing single integers or arrays.  Overview For example the numeric parameters here: ",
    "summary" : "Parameter for convolutions allowing single integers or arrays.",
    "title" : "IntOrPair"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/Index"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.Index. ",
    "summary" : "Inherited from Collection.Index.",
    "title" : "NestedDictionary.Index"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/compactMapValues(transform:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the values in the nested structure using the transform() function. ",
    "summary" : "Transform the values in the nested structure using the transform() function.",
    "title" : "compactMapValues(transform:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/StreamOrDevice\/device(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "device(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int32\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/vjp(_:primals:cotangents:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Compute the vector-Jacobian product.  function which takes an array of MLXArray and returns an array of MLXArray array of MLXArray at which to evaluate the Jacobian array of MLXArray which are the “vector” in the vector-Jacobian product.  The cotangents should be the same in number, shape and type as the outputs of f Return Value array of the vector-Jacobian products which is the same in number, shape and type of the outputs of f Discussion Computes the product of the cotangents with the Jacobian of a function f evaluated at primals.",
    "summary" : "Compute the vector-Jacobian product.",
    "title" : "vjp(_:primals:cotangents:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/jvp(_:primals:tangents:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Compute the Jacobian-vector product.  function which takes an array of MLXArray and returns an array of MLXArray array of MLXArray at which to evaluate the Jacobian array of MLXArray which are the “vector” in the Jacobian-vector product.  The tangents should be the same in number, shape and type as the inputs of f, e.g. the primals Return Value array of the Jacobian-vector products which is the same in number, shape and type of the outputs of f Discussion This computes the product of the Jacobian of a function f evaluated at primals with the tangents.",
    "summary" : "Compute the Jacobian-vector product.",
    "title" : "jvp(_:primals:tangents:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/min(_:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A min reduction over the entire array.  input array if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions min(_:axes:keepDims:stream:) min(_:axis:keepDims:stream:) min(axes:keepDims:stream:)",
    "summary" : "A min reduction over the entire array.",
    "title" : "min(_:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/max(_:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A max reduction over the entire array.  input array if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions max(_:axes:keepDims:stream:) max(_:axis:keepDims:stream:) max(axes:keepDims:stream:)",
    "summary" : "A max reduction over the entire array.",
    "title" : "max(_:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/StreamOrDevice\/stream(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "stream(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/.!=(_:_:)-mbw0"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise not equal.  Discussion Not equal on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators notEqual(_:_:stream:)",
    "summary" : "Element-wise not equal.",
    "title" : ".!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/flatMap(_:)-nya7"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.flatMap(_:). ",
    "summary" : "Inherited from Sequence.flatMap(_:).",
    "title" : "flatMap(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/uint8"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.uint8"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/product(axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A product reduction over the given axis.  axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions product(axes:keepDims:stream:) product(keepDims:stream:) product(_:axes:keepDims:stream:)",
    "summary" : "A product reduction over the given axis.",
    "title" : "product(axis:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from a HasDType value with a conversion to a given DType.  Discussion  See Also Initialization ScalarOrArray",
    "summary" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from a HasDType value with a conversion to a given DType.",
    "title" : "init(_:dtype:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/innerState()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Updatable.innerState(). ",
    "summary" : "Inherited from Updatable.innerState().",
    "title" : "innerState()"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/log2(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise base-2 logarithm.  See Also Arithmetic log(_:stream:) log10(_:stream:) log1p(_:stream:) log2(stream:)",
    "summary" : "Element-wise base-2 logarithm.",
    "title" : "log2(_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/atan(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise inverse tangent.  input array stream or device to evaluate on See Also Arithmetic tan(_:stream:)",
    "summary" : "Element-wise inverse tangent.",
    "title" : "atan(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/flatMap(_:)-9881n"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [

    ],
    "rawIndexableTextContent" : "Inherited from Sequence.flatMap(_:). ",
    "summary" : "Inherited from Sequence.flatMap(_:).",
    "title" : "flatMap(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Array"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "Array"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/convolve(_:_:mode:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The discrete convolution of 1D arrays.  1D input array 1D input array padding mode stream or device to evaluate on See Also Convolution conv1d(_:_:stride:padding:dilation:groups:stream:) conv2d(_:_:stride:padding:dilation:groups:stream:)",
    "summary" : "The discrete convolution of 1D arrays.",
    "title" : "convolve(_:_:mode:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/tri(_:m:k:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An array with ones at and below the given diagonal and zeros elsewhere.  number of rows in the output number of columns in the output – equal to n if not specified index of the diagonal data type of the output array stream or device to evaluate on Discussion Example:  See Also Initialization",
    "summary" : "An array with ones at and below the given diagonal and zeros elsewhere.",
    "title" : "tri(_:m:k:type:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Updatable\/innerState()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "innerState()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/update(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Replace the contents with a reference to a new array. ",
    "summary" : "Replace the contents with a reference to a new array.",
    "title" : "update(_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/sum(_:axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Sum reduce the array over the given axis.  input array axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions sum(_:axes:keepDims:stream:) sum(_:keepDims:stream:) sum(axes:keepDims:stream:)",
    "summary" : "Sum reduce the array over the given axis.",
    "title" : "sum(_:axis:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/prefix(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.prefix(_:). ",
    "summary" : "Inherited from Collection.prefix(_:).",
    "title" : "prefix(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/enumerated()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.enumerated(). ",
    "summary" : "Inherited from Sequence.enumerated().",
    "title" : "enumerated()"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/cummin(_:axis:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative minimum of the elements along the given axis.  Discussion  See Also Cumulative Operations cummin(_:reverse:inclusive:stream:) cummin(axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative minimum of the elements along the given axis.",
    "title" : "cummin(_:axis:reverse:inclusive:stream:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DeviceType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Type of device.  Overview See Device and StreamOrDevice.",
    "summary" : "Type of device.",
    "title" : "DeviceType"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Stream\/defaultStream(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "defaultStream(_:)"
  },
  {
    "headings" : [
      "Scalar Arrays",
      "Int vs Int32 vs Int64",
      "Double",
      "Multi Value Arrays",
      "Random Value Arrays",
      "Other Arrays",
      "Complex Values"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/initialization"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creating MLXArrays. Scalar Arrays A scalar MLXArray is created from a scalar and has zero dimensions:  If an MLXArray of a different type is needed there is an initializer:  Sometimes scalars can be used in place of arrays (no need to explicitly create them). Some functions and operators that work on MLXArray take a ScalarOrArray argument or have an overload that does.  A sampling: +(_:_:) +(_:_:) minimum(_:_:stream:) pow(_:_:stream:) pow(_:_:stream:) ScalarOrArray is a protocol that various numeric types (Int, Float, etc.) implement and it provides a method to convert the scalar to an MLXArray using a suggested DType.  This allows:  Scalars will not promote results to float32 using these functions. Int vs Int32 vs Int64 In swift an Int is a 64 bit value (aka Int64).  You can get 32 bit values by using:  In MLX the preferred integer type is DType.int32 or smaller.  You can create an MLXArray with an Int32 like this:  but as a convenience you can also create them like this:  If the value is out of range you will get an error pointing you to the alternate initializer:  All of the Int initializers (e.g. [Int] and Sequence<Int>) work the same way and all have the int64: variant. Double If you have a Double array, you have to convert it as MLXArray does not support Double:  Multi Value Arrays Typically MLXArrays are created with many values and potentially many dimensions.  You can create an MLXArray from another array (literal in this case, but swift Array variables work as well):  You can also create an array from a swift Sequence:  If you have Data or a UnsafePointer (of various kinds) you can also create an MLXArray from that:  When creating using an array or sequence you can also control the shape:  Random Value Arrays See also MLXRandom for creating arrays with random data. Other Arrays There are a number of factory methods to create common array patterns.  For example:  Complex Values MLXArray supports complex numbers, specifically a real and imaginary Float32 as DType.complex64. MLX uses swift-numerics to represent the Complex type, though there are a few functions for manipulating the individual pieces, see Conversion. To create a complex scalar there are a few approaches:  You can use Complex to create an array of complex as well:  If you have two arrays that you want to combine you can use this pattern: ",
    "summary" : "Creating MLXArrays.",
    "title" : "Initialization"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/exp(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise exponential.  See Also Arithmetic exp(stream:)",
    "summary" : "Element-wise exponential.",
    "title" : "exp(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt16\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/take(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Take elements from flattened 1-D array.  See Also take(_:axis:stream:) take(_:_:axis:stream:)",
    "summary" : "Take elements from flattened 1-D array.",
    "title" : "take(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/reshaped(_:stream:)-67a89"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Reshape an array while preserving the size.  Discussion  See Also Shapes reshaped(_:_:stream:) reshaped(_:stream:)",
    "summary" : "Reshape an array while preserving the size.",
    "title" : "reshaped(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/top(_:k:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the k largest elements from the flattened input along a given axis.  input array how many values stream or device to evaluate on Discussion The elements will not necessarily be in sorted order. See Also Sorting top(_:k:axis:stream:)",
    "summary" : "Returns the k largest elements from the flattened input along a given axis.",
    "title" : "top(_:k:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/zeros(like:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array of zeros.  array to copy shape and dtype from stream or device to evaluate on Discussion Example:  See Also Initialization zeros(_:type:stream:) ones(_:type:stream:)",
    "summary" : "Construct an array of zeros.",
    "title" : "zeros(like:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Stream\/init(index:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "init(index:_:)"
  },
  {
    "headings" : [
      "Overview",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Nested structure of arrays, dictionaries and values.  Overview Some of the capabilities of MLX (especially in MLXNN) need to deal with arbitrarily structured values.  This is simple in python but swift needs type to describe the structure. For example a nested dictionary \/ [Int] strucure might look like this:  This could be created with:  In practice these structures are created programatically by traversing other nested structures.  The above example was actually created from code like this:  See Also NestedItem",
    "summary" : "Nested structure of arrays, dictionaries and values.",
    "title" : "NestedDictionary"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/maximum(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise maximum.  the first array the second array stream or device to evaluate on Discussion Take the element-wise max of two arrays with Numpy Style Broadcasting semantics. See Also Arithmetic minimum(_:_:stream:)",
    "summary" : "Element-wise maximum.",
    "title" : "maximum(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/flatMap(_:)-73boo"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.flatMap(_:). ",
    "summary" : "Inherited from Sequence.flatMap(_:).",
    "title" : "flatMap(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/Sequence-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Sequence Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/reduce(into:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.reduce(into:_:). ",
    "summary" : "Inherited from Sequence.reduce(into:_:).",
    "title" : "reduce(into:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/argMax(axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Indices of the maximum values along the axis.  axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Indexes argMax(keepDims:stream:) argMin(axis:keepDims:stream:) argMax(_:axis:keepDims:stream:)",
    "summary" : "Indices of the maximum values along the axis.",
    "title" : "argMax(axis:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/conv2d(_:_:stride:padding:dilation:groups:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "2D convolution over an input with several channels.  input array of shape [N, H, W, C_in] weight array of shape [C_out, H, W, C_in] kernel stride input padding kernel dilation input feature groups stream or device to evaluate on Discussion Only the default groups=1 is currently supported. The numeric parameters may be given as single values:  This will produce a padding of (1, 1).  You can also give an array:  See IntOrPair for more information. See Also Convolution IntOrPair conv1d(_:_:stride:padding:dilation:groups:stream:) convolve(_:_:mode:stream:)",
    "summary" : "2D convolution over an input with several channels.",
    "title" : "conv2d(_:_:stride:padding:dilation:groups:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/softMax(_:axes:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Perform the softmax along the given axis.  input array stream or device to evaluate on Discussion This operation is a numerically stable version of:  See Also Arithmetic softMax(_:axis:stream:) softMax(_:stream:)",
    "summary" : "Perform the softmax along the given axis.",
    "title" : "softMax(_:axes:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/which(_:_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Alias for where(_:_:_:stream:) – select from x or y according to condition.  condition array input selected from where condiiton is non-zero or true input selected from where condiiton is zero or false stream or device to evaluate on Discussion The condition and input arrays must be the same shape or Numpy Style Broadcasting with each another. See Also Logical Operators where(_:_:_:stream:)",
    "summary" : "Alias for where(_:_:_:stream:) – select from x or y according to condition.",
    "title" : "which(_:_:_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/all(axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An and reduction over the given axes.  axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions all(axes:keepDims:stream:) all(keepDims:stream:) all(_:axes:keepDims:stream:)",
    "summary" : "An and reduction over the given axes.",
    "title" : "all(axis:keepDims:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/transposed(_:axes:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transpose the dimensions of the array.  input array Specifies the source axis for each axis in the new array See Also Shapes transposed(_:axis:stream:) transposed(_:stream:) transposed(axes:stream:)",
    "summary" : "Transpose the dimensions of the array.",
    "title" : "transposed(_:axes:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/product(keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A product reduction over the entire array.  if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions product(axes:keepDims:stream:) product(axis:keepDims:stream:) product(_:axes:keepDims:stream:)",
    "summary" : "A product reduction over the entire array.",
    "title" : "product(keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/allSatisfy(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.allSatisfy(_:). ",
    "summary" : "Inherited from Sequence.allSatisfy(_:).",
    "title" : "allSatisfy(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/reversed()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.reversed(). ",
    "summary" : "Inherited from Sequence.reversed().",
    "title" : "reversed()"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/realPart(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Extract the real part of a DType.complex64 array.  See Also Conversion",
    "summary" : "Extract the real part of a DType.complex64 array.",
    "title" : "realPart(stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/logSumExp(keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A log-sum-exp reduction over the entire array.  if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion The log-sum-exp reduction is a numerically stable version of:  See Also Reduction Functions logSumExp(axes:keepDims:stream:) logSumExp(axis:keepDims:stream:) logSumExp(_:axes:keepDims:stream:)",
    "summary" : "A log-sum-exp reduction over the entire array.",
    "title" : "logSumExp(keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/split(parts:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Split an array into equal size pieces along a given axis.  array is split into that many sections of equal size. It is a fatal error if this is not possible axis to split along Discussion Splits the array into equal size pieces along a given axis and returns an array of MLXArray:  See Also Shapes split(indices:axis:stream:) split(_:parts:axis:stream:)",
    "summary" : "Split an array into equal size pieces along a given axis.",
    "title" : "split(parts:axis:stream:)"
  },
  {
    "headings" : [
      "Overview",
      "Swift Naming",
      "Operations With Scalars"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/arithmetic"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "MLX supports a wide range of binary arithmetic operators. Overview Many of the operations are avilable as infix operators (e.g. ‘+’) or as functions, either on MLXArray itself or as free functions.  There are also a wide variety of element-wise math functions:  There are two operators from python that are not supported (as operators) in swift: @ (matmul(_:_:stream:)) and \/\/ (floorDivide(_:_:stream:)).  Please use the methods on MLXArray or the free functions. Swift Naming Note that the element-wise logical operations such as: .==(_:_:) .==(_:_:) are named using the Swift convention for SIMD operations, e.g. .==, .<, etc.  These operators produce a new MLXArray with true\/false values for the elementwise comparison. Operations With Scalars Many functions and operators that work on MLXArray take a ScalarOrArray argument or have an overload that does.  A sampling: +(_:_:) +(_:_:) minimum(_:_:stream:) pow(_:_:stream:) pow(_:_:stream:) ScalarOrArray is a protocol that various numeric types (Int, Float, etc.) implement and it provides a method to convert the scalar to an MLXArray using a suggested DType.  This allows:  Scalars will not promote results to float32 using these functions.",
    "summary" : "MLX supports a wide range of binary arithmetic operators.",
    "title" : "Arithmetic"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/complex64"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.complex64"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/cumsum(reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative sum of the elements over the flattened array.  Discussion  See Also Cumulative Operations cumsum(axis:reverse:inclusive:stream:) cumsum(_:axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative sum of the elements over the flattened array.",
    "title" : "cumsum(reverse:inclusive:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Stream\/CustomStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Bool\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/trimmingPrefix(while:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "16.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "16.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "9.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Collection.trimmingPrefix(while:). ",
    "summary" : "Inherited from Collection.trimmingPrefix(while:).",
    "title" : "trimmingPrefix(while:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/variance(_:axes:keepDims:ddof:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Compute the variance(s) over the given axes  input array axes to reduce over if true keep the reduces axes as singleton dimensions the divisor to compute the variance is N - ddof See Also Reduction Functions variance(_:axis:keepDims:ddof:stream:) variance(_:keepDims:ddof:stream:) variance(axes:keepDims:ddof:stream:)",
    "summary" : "Compute the variance(s) over the given axes",
    "title" : "variance(_:axes:keepDims:ddof:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt64\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/+(_:_:)-1rv98"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise addition.  Discussion Add two arrays with Numpy Style Broadcasting. For example:  See Also Arithmetic add(_:_:stream:)",
    "summary" : "Element-wise addition.",
    "title" : "+(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/shuffled(using:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.shuffled(using:). ",
    "summary" : "Inherited from Sequence.shuffled(using:).",
    "title" : "shuffled(using:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/formatted(_:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.formatted(_:). ",
    "summary" : "Inherited from Sequence.formatted(_:).",
    "title" : "formatted(_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/padded(_:width:value:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Pad an array with a constant value.  the array to pad either an Int number of values to pad before AND after each axis or an array of 2 giving the before and after counts constant value to pad the edges with stream or device to evaluate on See Also Shapes padded(_:widths:value:stream:)",
    "summary" : "Pad an array with a constant value.",
    "title" : "padded(_:width:value:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/eval(_:)-8fexv"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Evaluate one or more MLXArray  See Also Lazy Evaluation",
    "summary" : "Evaluate one or more MLXArray",
    "title" : "eval(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Array\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/ndim"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Number of dimensions in the array.  Discussion ",
    "summary" : "Number of dimensions in the array.",
    "title" : "ndim"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/mapValues(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the values in the nested structure using the transform() function while simultaneously iterating the same structure in a second NestedItem.  Discussion This transforms both values simultaneously and produces two new NestedItem conceptually somewhat like map(zip(i1, i2)). The structure of the second NestedItem should be identical to the first but these exceptions are allowed: .none will match any value, e.g. you can iterate an empty second item arrays do not need to be the same length – the receiver’s length is matched dictionaries do not need to have the same keys – the receivers keys are matched This is typically called via mapValues(_:transform:). See Also mapValues(_:transform:) mapValues(_:_:_:)",
    "summary" : "Transform the values in the nested structure using the transform() function while simultaneously iterating the same structure in a second NestedItem.",
    "title" : "mapValues(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/flattened(_:start:end:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Flatten an array.  input array first dimension to flatten last dimension to flatten stream or device to evaluate on Discussion For example:  See Also Shapes flattened(start:end:stream:)",
    "summary" : "Flatten an array.",
    "title" : "flattened(_:start:end:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/abs(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise absolute value.  stream or device to evaluate on See Also Arithmetic",
    "summary" : "Element-wise absolute value.",
    "title" : "abs(stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/compactMapValues(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the values in the nested structure using the transform() function.  Discussion This is typically called via compactMapValues(transform:). See Also compactMapValues(transform:)",
    "summary" : "Transform the values in the nested structure using the transform() function.",
    "title" : "compactMapValues(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/argMin(_:axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Indices of the minimum values along the axis.  input array axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Indexes argMin(_:keepDims:stream:) argMax(_:axis:keepDims:stream:) argMin(axis:keepDims:stream:)",
    "summary" : "Indices of the minimum values along the axis.",
    "title" : "argMin(_:axis:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/StreamOrDevice\/ctx"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Internal context – used with Cmlx calls. ",
    "summary" : "Internal context – used with Cmlx calls.",
    "title" : "ctx"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/minimum(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise minimum.  the first array the second array stream or device to evaluate on Discussion Take the element-wise min of two arrays with Numpy Style Broadcasting semantics. See Also Arithmetic maximum(_:_:stream:)",
    "summary" : "Element-wise minimum.",
    "title" : "minimum(_:_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/asType(_:stream:)-6d44y"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create a new MLXArray with the contents converted to the given DType.  type to convert to See Also Conversion",
    "summary" : "Create a new MLXArray with the contents converted to the given DType.",
    "title" : "asType(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/suffix(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.suffix(from:). ",
    "summary" : "Inherited from Collection.suffix(from:).",
    "title" : "suffix(from:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/eval()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Evaluate the array.  Discussion MLX is lazy and arrays are not fully realized until they are evaluated.  This method is typically not needed as all reads ensure the contents are evaluated.",
    "summary" : "Evaluate the array.",
    "title" : "eval()"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:)-6nnka"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an Int as a Dtype.int32.  Discussion  Note: if the value is out of bounds for an Int32 the precondition will fail.  If you need an Int (Int64) scalar, please use init(int64:). See Also Initialization init(int64:)",
    "summary" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an Int as a Dtype.int32.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/transposed(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "transposed(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/description"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomStringConvertible.description. ",
    "summary" : "Inherited from CustomStringConvertible.description.",
    "title" : "description"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/split(indices:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Split an array along a given axis.  the indices of the start of each subarray along the given axis axis to split along See Also Shapes split(parts:axis:stream:) split(_:indices:axis:stream:)",
    "summary" : "Split an array along a given axis.",
    "title" : "split(indices:axis:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/contains(where:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.contains(where:). ",
    "summary" : "Inherited from Sequence.contains(where:).",
    "title" : "contains(where:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/._=(_:_:)-6zxj9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise greater than or equal with a ScalarOrArray (scalar) argument.  See Also Arithmetic .>=(_:_:)",
    "summary" : "Element-wise greater than or equal with a ScalarOrArray (scalar) argument.",
    "title" : ".>=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Device\/cpu"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "cpu"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Float16\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/indexes"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Functions to produce and consume array indexes. Overview MLX has a number of functions (typically named argX()) that can produce array indices and a few functions that can consume them. ",
    "summary" : "Functions to produce and consume array indexes.",
    "title" : "Indexes"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:). ",
    "summary" : "Inherited from Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:).",
    "title" : "split(maxSplits:omittingEmptySubsequences:whereSeparator:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/cos(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise cosine.  See Also Arithmetic cos(_:stream:)",
    "summary" : "Element-wise cosine.",
    "title" : "cos(stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/sinh(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise hyperbolic sine.  input array stream or device to evaluate on See Also Arithmetic sin(_:stream:)",
    "summary" : "Element-wise hyperbolic sine.",
    "title" : "sinh(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/uint32"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.uint32"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/+(_:_:)-2vili"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise addition with a ScalarOrArray (scalar) argument.  See Also Arithmetic +(_:_:)",
    "summary" : "Element-wise addition with a ScalarOrArray (scalar) argument.",
    "title" : "+(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/subscript(_:stream:)-4z56f"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "subscript(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/partitioned(_:kth:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a partitioned copy of the array such that the smaller kth elements are first.  input array Element at the kth index will be in its sorted position in the output. All elements before the kth index will be less or equal to the kth element and all elements after will be greater or equal to the kth element in the output. axis to partition over stream or device to evaluate on Discussion The ordering of the elements in partitions is undefined. See Also Sorting partitioned(_:kth:stream:) argPartition(_:kth:axis:stream:)",
    "summary" : "Returns a partitioned copy of the array such that the smaller kth elements are first.",
    "title" : "partitioned(_:kth:axis:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/sin(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise sine.  See Also Arithmetic sin(stream:)",
    "summary" : "Element-wise sine.",
    "title" : "sin(_:stream:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/eval(_:)-190w1"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Evaluate one or more MLXArray.  Discussion See eval(_:)",
    "summary" : "Evaluate one or more MLXArray.",
    "title" : "eval(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/indices"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.indices. ",
    "summary" : "Inherited from Collection.indices.",
    "title" : "indices"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/underestimatedCount"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.underestimatedCount. ",
    "summary" : "Inherited from Collection.underestimatedCount.",
    "title" : "underestimatedCount"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int16\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/filter(_:)-5hna4"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.filter(_:). ",
    "summary" : "Inherited from Sequence.filter(_:).",
    "title" : "filter(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/swappedAxes(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Swap two axes of an array.  Discussion  See Also Shapes swappedAxes(_:_:_:stream:)",
    "summary" : "Swap two axes of an array.",
    "title" : "swappedAxes(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/formIndex(_:offsetBy:limitedBy:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.formIndex(_:offsetBy:limitedBy:). ",
    "summary" : "Inherited from Collection.formIndex(_:offsetBy:limitedBy:).",
    "title" : "formIndex(_:offsetBy:limitedBy:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/._(_:_:)-2v86b"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise greater than with a ScalarOrArray (scalar) argument.  See Also Arithmetic .>(_:_:)",
    "summary" : "Element-wise greater than with a ScalarOrArray (scalar) argument.",
    "title" : ".>(_:_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/squeezed(_:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Remove length one axes from an array.  input array axis to remove See Also Shapes squeezed(_:axes:stream:) squeezed(_:stream:) squeezed(axes:stream:)",
    "summary" : "Remove length one axes from an array.",
    "title" : "squeezed(_:axis:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Float16\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/mean(axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A mean reduction over the given axes.  axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions mean(axis:keepDims:stream:) mean(keepDims:stream:) mean(_:axes:keepDims:stream:)",
    "summary" : "A mean reduction over the given axes.",
    "title" : "mean(axes:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/description(indent:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from IndentedDescription.description(indent:). ",
    "summary" : "Inherited from IndentedDescription.description(indent:).",
    "title" : "description(indent:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/log(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise natural logarithm.  See Also Arithmetic log(stream:)",
    "summary" : "Element-wise natural logarithm.",
    "title" : "log(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/int16"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.int16"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/swappedAxes(_:_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Swap two axes of an array.  Discussion  See Also Shapes swappedAxes(_:_:stream:)",
    "summary" : "Swap two axes of an array.",
    "title" : "swappedAxes(_:_:_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/linspace(_:_:count:stream:)-6w959"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Generate num evenly spaced numbers over interval [start, stop].  start value stop value number of samples stream or device to evaluate on Discussion Example:  See Also Initialization linspace(_:_:count:stream:)",
    "summary" : "Generate num evenly spaced numbers over interval [start, stop].",
    "title" : "linspace(_:_:count:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/product(_:axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A product reduction over the given axis.  input array axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions product(_:axes:keepDims:stream:) product(_:keepDims:stream:) product(axes:keepDims:stream:)",
    "summary" : "A product reduction over the given axis.",
    "title" : "product(_:axis:keepDims:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/sum(keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Sum reduce the array over all axes.  if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions sum(axes:keepDims:stream:) sum(axis:keepDims:stream:) sum(_:axes:keepDims:stream:)",
    "summary" : "Sum reduce the array over all axes.",
    "title" : "sum(keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/tri(_:m:k:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An array with ones at and below the given diagonal and zeros elsewhere.  number of rows in the output number of columns in the output – equal to n if not specified index of the diagonal data type of the output array stream or device to evaluate on Discussion Example:  See Also Initialization",
    "summary" : "An array with ones at and below the given diagonal and zeros elsewhere.",
    "title" : "tri(_:m:k:type:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Double\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/cumprod(reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative product of the elements over the flattened array.  Discussion  See Also Cumulative Operations cumprod(axis:reverse:inclusive:stream:) cumprod(_:axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative product of the elements over the flattened array.",
    "title" : "cumprod(reverse:inclusive:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/movedAxis(source:destination:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Move an axis to a new position.  Discussion  See Also Shapes swappedAxes(_:_:stream:) movedAxis(_:source:destination:stream:)",
    "summary" : "Move an axis to a new position.",
    "title" : "movedAxis(source:destination:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/dropLast(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.dropLast(_:). ",
    "summary" : "Inherited from Collection.dropLast(_:).",
    "title" : "dropLast(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Bool\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.split(maxSplits:omittingEmptySubsequences:whereSeparator:). ",
    "summary" : "Inherited from Sequence.split(maxSplits:omittingEmptySubsequences:whereSeparator:).",
    "title" : "split(maxSplits:omittingEmptySubsequences:whereSeparator:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/movedAxis(_:source:destination:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Move an axis to a new position.  Discussion  See Also Shapes swappedAxes(_:_:_:stream:) movedAxis(source:destination:stream:)",
    "summary" : "Move an axis to a new position.",
    "title" : "movedAxis(_:source:destination:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/cumsum(axis:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative sum of the elements along the given axis.  Discussion  See Also Cumulative Operations cumsum(reverse:inclusive:stream:) cumsum(_:axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative sum of the elements along the given axis.",
    "title" : "cumsum(axis:reverse:inclusive:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/variance(_:keepDims:ddof:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Compute the variance(s) over the given axes  input array if true keep the reduces axes as singleton dimensions the divisor to compute the variance is N - ddof See Also Reduction Functions variance(_:axes:keepDims:ddof:stream:) variance(_:axis:keepDims:ddof:stream:) variance(axes:keepDims:ddof:stream:)",
    "summary" : "Compute the variance(s) over the given axes",
    "title" : "variance(_:keepDims:ddof:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Float16"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "Float16"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/sum(axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Sum reduce the array over the given axis.  axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions sum(axes:keepDims:stream:) sum(keepDims:stream:) sum(_:axes:keepDims:stream:)",
    "summary" : "Sum reduce the array over the given axis.",
    "title" : "sum(axis:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/compare(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.compare(_:_:). ",
    "summary" : "Inherited from Sequence.compare(_:_:).",
    "title" : "compare(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/argPartition(_:kth:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the indices that partition the array.  input array element index at the kth position in the output will give the sorted position.  All indices before thekth position will be of elements less than or equal to the element at the kth index and all indices after will be elemenents greater than or equal to the element at the kth position. axis to partition over stream or device to evaluate on Discussion The ordering of the elements within a partition in given by the indices is undefined. For example:  See Also Indexes argPartition(_:kth:stream:) partitioned(_:kth:axis:stream:)",
    "summary" : "Returns the indices that partition the array.",
    "title" : "argPartition(_:kth:axis:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/tanh(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise hyperbolic tangent.  input array stream or device to evaluate on See Also Arithmetic",
    "summary" : "Element-wise hyperbolic tangent.",
    "title" : "tanh(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt32\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Enum wrapping Cmlx.mlx_array_dtype.  Overview This is typically not used directly, rather it is inferred from parameters that are HasDType.",
    "summary" : "Enum wrapping Cmlx.mlx_array_dtype.",
    "title" : "DType"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/all(_:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An and reduction over the given axes.  input array if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions all(_:axes:keepDims:stream:) all(_:axis:keepDims:stream:) all(axes:keepDims:stream:)",
    "summary" : "An and reduction over the given axes.",
    "title" : "all(_:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/reduce(into:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.reduce(into:_:). ",
    "summary" : "Inherited from Sequence.reduce(into:_:).",
    "title" : "reduce(into:_:)"
  },
  {
    "headings" : [
      "Overview",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Updatable"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An object that can provide a list of the MLXArray in its inner state.  Overview Note that the array itself is not a reference to the inner state, but the MLXArray instances can be update(_:) to mutate the inner state.  The exact working is an implemention detail for MLX and should not be depended on by outside callers. See Also compile(inputs:outputs:_:)",
    "summary" : "An object that can provide a list of the MLXArray in its inner state.",
    "title" : "Updatable"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/any(keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An or reduction over the given axes.  if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions any(axes:keepDims:stream:) any(axis:keepDims:stream:) any(_:axes:keepDims:stream:)",
    "summary" : "An or reduction over the given axes.",
    "title" : "any(keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/less(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise less than.  the left hand side array the right hand side array stream or device to evaluate on Discussion Less than on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators",
    "summary" : "Element-wise less than.",
    "title" : "less(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/reduce(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.reduce(_:_:). ",
    "summary" : "Inherited from Sequence.reduce(_:_:).",
    "title" : "reduce(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/softMax(_:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Perform the softmax along the given axis.  input array stream or device to evaluate on Discussion This operation is a numerically stable version of:  See Also Arithmetic softMax(_:axes:stream:) softMax(_:stream:)",
    "summary" : "Perform the softmax along the given axis.",
    "title" : "softMax(_:axis:stream:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/HasDType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Protocol for types that can provide a DType  Overview This is used to extract the DType for values pass in to MLXArray implicitly where possible. See also ScalarOrArray.",
    "summary" : "Protocol for types that can provide a DType",
    "title" : "HasDType"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/asinh(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise inverse hyperbolic sine.  input array stream or device to evaluate on See Also Arithmetic sinh(_:stream:)",
    "summary" : "Element-wise inverse hyperbolic sine.",
    "title" : "asinh(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt64"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "UInt64"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/**(_:_:)-6ve5u"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise power with a ScalarOrArray (scalar) argument.  See Also Arithmetic **(_:_:)",
    "summary" : "Element-wise power with a ScalarOrArray (scalar) argument.",
    "title" : "**(_:_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/tan(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise tangent.  input array stream or device to evaluate on See Also Arithmetic",
    "summary" : "Element-wise tangent.",
    "title" : "tan(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/IntOrPair\/init(_:)-4gcmc"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/makeIterator()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.makeIterator(). ",
    "summary" : "Inherited from Collection.makeIterator().",
    "title" : "makeIterator()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/mapValues(transform:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the values in the nested structure using the transform() function. ",
    "summary" : "Transform the values in the nested structure using the transform() function.",
    "title" : "mapValues(transform:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/subscript(_:axis:stream:)-79psf"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "subscript(_:axis:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/conversion"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Conversion functions.",
    "summary" : "Conversion functions.",
    "title" : "Conversion"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ones(like:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array of ones.  array to copy shape and dtype from stream or device to evaluate on Discussion Example:  See Also Initialization ones(_:type:stream:) zeros(_:type:stream:)",
    "summary" : "Construct an array of ones.",
    "title" : "ones(like:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Evaluatable"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An object that can be passed to eval(_:) and can produce a list of interior MLXArray to be evaluated. ",
    "summary" : "An object that can be passed to eval(_:) and can produce a list of interior MLXArray to be evaluated.",
    "title" : "Evaluatable"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/matmul(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Matrix multiplication.  the left hand side array the right hand side array stream or device to evaluate on Discussion Perform the (possibly batched) matrix multiplication of two arrays. This function supports broadcasting for arrays with more than two dimensions. If the first array is 1-D then a 1 is prepended to its shape to make it a matrix. Similarly if the second array is 1-D then a 1 is appended to its shape to make it a matrix. In either case the singleton dimension is removed from the result. A batched matrix multiplication is performed if the arrays have more than 2 dimensions.  The matrix dimensions for the matrix product are the last two dimensions of each input. All but the last two dimensions of each input are broadcast with one another using standard Numpy Style Broadcasting. For example:  See Also Arithmetic multiply(_:_:stream:) matmul(_:stream:)",
    "summary" : "Matrix multiplication.",
    "title" : "matmul(_:_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/all(keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An and reduction over the given axes.  if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions all(axes:keepDims:stream:) all(axis:keepDims:stream:) all(_:axes:keepDims:stream:)",
    "summary" : "An and reduction over the given axes.",
    "title" : "all(keepDims:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/sin(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise sine.  See Also Arithmetic sin(_:stream:)",
    "summary" : "Element-wise sine.",
    "title" : "sin(stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/where(_:_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Select from x or y according to condition.  condition array input selected from where condiiton is non-zero or true input selected from where condiiton is zero or false stream or device to evaluate on Discussion The condition and input arrays must be the same shape or Numpy Style Broadcasting with each another. which(_:_:_:stream:) may be easier to use (where is a Swift keyword). See Also Logical Operators which(_:_:_:stream:)",
    "summary" : "Select from x or y according to condition.",
    "title" : "where(_:_:_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/full(_:values:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array with the given value.  shape of the output array values to be bradcast into the array data type of the output array stream or device to evaluate on Discussion Constructs an array of size shape filled with vals. If vals is an :obj:array it must be Numpy Style Broadcasting to the given shape. Example:  See Also Initialization full(_:values:stream:) repeat(_:count:axis:stream:)",
    "summary" : "Construct an array with the given value.",
    "title" : "full(_:values:type:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/sorted(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.sorted(by:). ",
    "summary" : "Inherited from Sequence.sorted(by:).",
    "title" : "sorted(by:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/asType(_:stream:)-4eqoc"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create a new MLXArray with the contents converted to the given type, e.g. Float.self.  type to convert to See Also Conversion",
    "summary" : "Create a new MLXArray with the contents converted to the given type, e.g. Float.self.",
    "title" : "asType(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "A Simple Example"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/unified-memory"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "MLX takes advantage of the shared memory between the CPU and GPU. Discussion See also mlx python docs. Apple silicon has a unified memory architecture. The CPU and GPU have direct access to the same memory pool. MLX is designed to take advantage of that. Concretely, when you make an array in MLX you don’t have to specify its location:  Both a and b live in unified memory. In MLX, rather than moving arrays to devices, you specify the device when you run the operation. Any device can perform any operation on a and b without needing to move them from one memory location to another. For example:  In the above, both the CPU and the GPU will perform the same add operation. The operations can (and likely will) be run in parallel since there are no dependencies between them. See Using Streams for more information the semantics of streams in MLX. In the above add example, there are no dependencies between operations, so there is no possibility for race conditions. If there are dependencies, the MLX scheduler will automatically manage them. For example:  In the above case, the second add runs on the GPU but it depends on the output of the first add which is running on the CPU. MLX will automatically insert a dependency between the two streams so that the second add only starts executing after the first is complete and c is available. A Simple Example Here is a more interesting (albeit slightly contrived example) of how unified memory can be helpful. Suppose we have the following computation:  which we want to run with the following arguments:  The first matmul operation is a good fit for the GPU since it’s more compute dense. The second sequence of operations are a better fit for the CPU, since they are very small and would probably be overhead bound on the GPU. If we time the computation fully on the GPU, we get 2.8 milliseconds. But if we run the computation with d1: .gpu and d2: .cpu, then the time is only about 1.4 milliseconds, about twice as fast. These times were measured on an M1 Max.",
    "summary" : "MLX takes advantage of the shared memory between the CPU and GPU.",
    "title" : "Unified Memory"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DeviceType\/hash(into:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from RawRepresentable.hash(into:). ",
    "summary" : "Inherited from RawRepresentable.hash(into:).",
    "title" : "hash(into:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/take(_:_:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Take elements along an axis.  Discussion The elements are taken from indices along the specified axis.  See Also take(_:_:stream:) take(_:axis:stream:)",
    "summary" : "Take elements along an axis.",
    "title" : "take(_:_:axis:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:_:)-dq8h"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of MLXArray from a buffer of HasDType values with an optional shape.  Discussion  See Also Initialization",
    "summary" : "Initalizer allowing creation of MLXArray from a buffer of HasDType values with an optional shape.",
    "title" : "init(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/flattenedValues()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a flattened representation of the structured contents as an array of values.  Discussion This is typically called via flattenedValues(). Note that unlike flattened(prefix:) this cannot be reconstructed back into the original structure, but can be used with replacingValues(with:) in a similar fashion. See Also flattened(prefix:) flattenedValues() replacingValues(with:)",
    "summary" : "Return a flattened representation of the structured contents as an array of values.",
    "title" : "flattenedValues()"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/min(axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A min reduction over the given axis.  axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions min(axes:keepDims:stream:) min(keepDims:stream:) min(_:axes:keepDims:stream:)",
    "summary" : "A min reduction over the given axis.",
    "title" : "min(axis:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/map(_:)-46m52"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.map(_:). ",
    "summary" : "Inherited from Sequence.map(_:).",
    "title" : "map(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/product(axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A product reduction over the given axes.  axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions product(axis:keepDims:stream:) product(keepDims:stream:) product(_:axes:keepDims:stream:)",
    "summary" : "A product reduction over the given axes.",
    "title" : "product(axes:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(int64:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an Int as a Dtype.int64.  Discussion  Note init(_:) (producing an int32 scalar is preferred). See Also Initialization",
    "summary" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an Int as a Dtype.int64.",
    "title" : "init(int64:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/erfInverse(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise inverse of erf(_:stream:).  input array stream or device to evaluate on Discussion For details, please see this documentation See Also Arithmetic erf(_:stream:)",
    "summary" : "Element-wise inverse of erf(_:stream:).",
    "title" : "erfInverse(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/int64"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.int64"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/index(after:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.index(after:). ",
    "summary" : "Inherited from Collection.index(after:).",
    "title" : "index(after:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/_(_:_:)-8az7l"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise remainder with a ScalarOrArray (scalar) argument.  See Also Arithmetic %(_:_:)",
    "summary" : "Element-wise remainder with a ScalarOrArray (scalar) argument.",
    "title" : "%(_:_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/sorted(_:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a sorted copy of the array.  input array axis to sort over stream or device to evaluate on See Also Sorting sorted(_:stream:) argSort(_:axis:stream:)",
    "summary" : "Returns a sorted copy of the array.",
    "title" : "sorted(_:axis:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/all(_:axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An and reduction over the given axes.  input array axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions all(_:axes:keepDims:stream:) all(_:keepDims:stream:) all(axes:keepDims:stream:)",
    "summary" : "An and reduction over the given axes.",
    "title" : "all(_:axis:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(int64:_:)-7bgj2"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an [Int] as a Dtype.int64.  Discussion  Note init(int64:_:) (producing an int32 scalar is preferred). See Also Initialization",
    "summary" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an [Int] as a Dtype.int64.",
    "title" : "init(int64:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/greaterEqual(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise less greater than or equal.  the left hand side array the right hand side array stream or device to evaluate on Discussion Greater than or equal on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators",
    "summary" : "Element-wise less greater than or equal.",
    "title" : "greaterEqual(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/first(where:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.first(where:). ",
    "summary" : "Inherited from Sequence.first(where:).",
    "title" : "first(where:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:_:)-89jw1"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of MLXArray from an array of HasDType values with an optional shape.  Discussion  See Also Initialization",
    "summary" : "Initalizer allowing creation of MLXArray from an array of HasDType values with an optional shape.",
    "title" : "init(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/max(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.max(by:). ",
    "summary" : "Inherited from Sequence.max(by:).",
    "title" : "max(by:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/mean(keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A mean reduction over the entire array.  if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions mean(axes:keepDims:stream:) mean(axis:keepDims:stream:) mean(_:axes:keepDims:stream:)",
    "summary" : "A mean reduction over the entire array.",
    "title" : "mean(keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/cumprod(axis:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative product of the elements along the given axis.  Discussion  See Also Cumulative Operations cumprod(reverse:inclusive:stream:) cumprod(_:axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative product of the elements along the given axis.",
    "title" : "cumprod(axis:reverse:inclusive:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/grad(_:)-r8dv"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "grad(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/StreamOrDevice\/gpu"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The defaultStream(_:) on the gpu ",
    "summary" : "The defaultStream(_:) on the gpu",
    "title" : "gpu"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/identity(_:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create a square identity matrix.  number of rows and columns in the output data type of the output array stream or device to evaluate on Discussion Example:  See Also Initialization eye(_:m:k:type:stream:)",
    "summary" : "Create a square identity matrix.",
    "title" : "identity(_:type:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/endIndex"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.endIndex. ",
    "summary" : "Inherited from Collection.endIndex.",
    "title" : "endIndex"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/conv1d(_:_:stride:padding:dilation:groups:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "1D convolution over an input with several channels.  input array of shape [N, H, C_in] weight array of shape [C_out, H, C_in] kernel stride input padding kernel dilation input feature groups stream or device to evaluate on Discussion Only the default groups=1 is currently supported. See Also Convolution conv2d(_:_:stride:padding:dilation:groups:stream:) convolve(_:_:mode:stream:)",
    "summary" : "1D convolution over an input with several channels.",
    "title" : "conv1d(_:_:stride:padding:dilation:groups:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/squeezed(axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Remove length one axes from an array.  axis to remove See Also Shapes squeezed(axes:stream:) squeezed(stream:) squeezed(_:axes:stream:)",
    "summary" : "Remove length one axes from an array.",
    "title" : "squeezed(axis:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/dropLast(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.dropLast(_:). ",
    "summary" : "Inherited from Sequence.dropLast(_:).",
    "title" : "dropLast(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Double\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/T(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transpose the dimensions of the array.  Discussion Cover for transposed(_:stream:)",
    "summary" : "Transpose the dimensions of the array.",
    "title" : "T(_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/-(_:_:)-9mf3"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise subtraction with a ScalarOrArray (scalar) argument.  See Also Arithmetic MLXArray\/-(_:_:)-7frdo",
    "summary" : "Element-wise subtraction with a ScalarOrArray (scalar) argument.",
    "title" : "-(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/pow(_:_:stream:)-7pe7j"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "pow(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/Sequence-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Sequence Implementations"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/expandedDimensions(axes:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Add a size one dimension at the given axis.  input array indexes of the inserted dimensions stream or device to evaluate on See Also Shapes expandedDimensions(axis:stream:)",
    "summary" : "Add a size one dimension at the given axis.",
    "title" : "expandedDimensions(axes:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/mapValues(_:_:transform:)-52e9l"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the values in the nested structure using the transform() function while simultaneously iterating the same structure in a second and third NestedDictionary.  Discussion This transforms all three values simultaneously and produces two new NestedDictionary conceptually somewhat like map(zip(i1, i2, i3)). The structure of the second and third NestedDictionary should be identical to the first but these exceptions are allowed: .none will match any value, e.g. you can iterate an empty second item arrays do not need to be the same length – the receiver’s length is matched dictionaries do not need to have the same keys – the receivers keys are matched See Also mapValues(_:_:_:) mapValues(_:transform:)",
    "summary" : "Transform the values in the nested structure using the transform() function while simultaneously iterating the same structure in a second and third NestedDictionary.",
    "title" : "mapValues(_:_:transform:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/flattened(prefix:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a flattened representation of the structured contents as an array of key\/value tuples.  See Also unflattened(_:) unflattened(_:)",
    "summary" : "Return a flattened representation of the structured contents as an array of key\/value tuples.",
    "title" : "flattened(prefix:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/._(_:_:)-fwi1"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise greater than.  Discussion Greater than on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators greater(_:_:stream:)",
    "summary" : "Element-wise greater than.",
    "title" : ".>(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/joined()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.joined(). ",
    "summary" : "Inherited from Sequence.joined().",
    "title" : "joined()"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:_:type:)-5esf9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of MLXArray from a Data filled with bytes of HasDType values with an optional shape.  Discussion  See Also Initialization",
    "summary" : "Initalizer allowing creation of MLXArray from a Data filled with bytes of HasDType values with an optional shape.",
    "title" : "init(_:_:type:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/concatenated(_:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Concatenate the arrays along the given axis.  input array the axis along which to concatenate stream or device to evaluate on See Also Shapes",
    "summary" : "Concatenate the arrays along the given axis.",
    "title" : "concatenated(_:axis:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ConvolveMode\/same"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "ConvolveMode.same"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/formIndex(_:offsetBy:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.formIndex(_:offsetBy:). ",
    "summary" : "Inherited from Collection.formIndex(_:offsetBy:).",
    "title" : "formIndex(_:offsetBy:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/._=(_:_:)-6vb92"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise less than or equal with a ScalarOrArray (scalar) argument.  See Also Arithmetic .<=(_:_:)",
    "summary" : "Element-wise less than or equal with a ScalarOrArray (scalar) argument.",
    "title" : ".<=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Bool\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/mapValues(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the values in the nested structure using the transform() function.  Discussion This is typically called via mapValues(transform:). See Also mapValues(transform:)",
    "summary" : "Transform the values in the nested structure using the transform() function.",
    "title" : "mapValues(_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/sign(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise sign.  input array stream or device to evaluate on See Also Arithmetic",
    "summary" : "Element-wise sign.",
    "title" : "sign(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/compactMap(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.compactMap(_:). ",
    "summary" : "Inherited from Sequence.compactMap(_:).",
    "title" : "compactMap(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/copy()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "copy()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Float16\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/free-functions"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Free functions in MLX. Overview MLX has a wide variety of free functions, categorized below.  MLXArray has some identical operations as methods for convenience.",
    "summary" : "Free functions in MLX.",
    "title" : "Free Functions"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/Collection-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Collection Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Evaluatable\/innerState()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "innerState()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/max(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.max(by:). ",
    "summary" : "Inherited from Sequence.max(by:).",
    "title" : "max(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/mapValues(_:transform:)-4ctis"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "mapValues(_:transform:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DeviceType\/init(rawValue:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from RawRepresentable.init(rawValue:). ",
    "summary" : "Inherited from RawRepresentable.init(rawValue:).",
    "title" : "init(rawValue:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int8"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "Int8"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/cumsum(_:axis:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative sum of the elements along the given axis.  Discussion  See Also Cumulative Operations cumsum(_:reverse:inclusive:stream:) cumsum(axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative sum of the elements along the given axis.",
    "title" : "cumsum(_:axis:reverse:inclusive:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/cumsum(_:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative sum of the elements over the flattened array.  Discussion  See Also Cumulative Operations cumsum(_:axis:reverse:inclusive:stream:) cumsum(axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative sum of the elements over the flattened array.",
    "title" : "cumsum(_:reverse:inclusive:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/convolution"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Convolution operations.",
    "summary" : "Convolution operations.",
    "title" : "Convolution"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/randomElement()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.randomElement(). ",
    "summary" : "Inherited from Collection.randomElement().",
    "title" : "randomElement()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/isFloatingPoint"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "isFloatingPoint"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/all(_:axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An and reduction over the given axes.  input array axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions all(_:axis:keepDims:stream:) all(_:keepDims:stream:) all(axes:keepDims:stream:)",
    "summary" : "An and reduction over the given axes.",
    "title" : "all(_:axes:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/cummax(axis:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative maximum of the elements along the given axis.  Discussion  See Also Cumulative Operations cummax(reverse:inclusive:stream:) cummax(_:axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative maximum of the elements along the given axis.",
    "title" : "cummax(axis:reverse:inclusive:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/+(_:_:)-1jn5i"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise addition with a ScalarOrArray (scalar) argument.  See Also Arithmetic +(_:_:)",
    "summary" : "Element-wise addition with a ScalarOrArray (scalar) argument.",
    "title" : "+(_:_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/expandedDimensions(_:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Add a size one dimension at the given axis.  input array index of the inserted dimension stream or device to evaluate on See Also Shapes expandedDimensions(_:axes:stream:)",
    "summary" : "Add a size one dimension at the given axis.",
    "title" : "expandedDimensions(_:axis:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/max(keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A max reduction over the entire array.  if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions max(axes:keepDims:stream:) max(axis:keepDims:stream:) max(_:axes:keepDims:stream:)",
    "summary" : "A max reduction over the entire array.",
    "title" : "max(keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt64\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/description"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomStringConvertible.description. ",
    "summary" : "Inherited from CustomStringConvertible.description.",
    "title" : "description"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ConvolveMode\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/formIndex(after:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.formIndex(after:). ",
    "summary" : "Inherited from Collection.formIndex(after:).",
    "title" : "formIndex(after:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/IntOrPair\/second"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "second"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/-(_:_:)-7frdo"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise subtraction.  Discussion Subtract two arrays with Numpy Style Broadcasting. For example:  See Also Arithmetic subtract(_:_:stream:)",
    "summary" : "Element-wise subtraction.",
    "title" : "-(_:_:)"
  },
  {
    "headings" : [
      "Overview",
      "Other MLX Packages"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "MLX is a NumPy-like array framework designed for efficient and flexible machine learning research on Apple silicon, brought to you by Apple machine learning research Overview MLX is an array framework for machine learning research on Apple silicon. MLX Swift expands MLX to the Swift language, making experimentation on Apple silicon easier for ML researchers. The Swift API closely follows the C++ and Python MLX APIs, which in turn closely follow NumPy with a few exceptions. Here are some useful pages showing how MLX Swift works and is different from python: Converting From Python – information about converting Python code and differences between Python and Swift Indexing – information about array indexing Arithmetic – information about array arithmetic The main differences between MLX and NumPy are: Composable function transformations: MLX has composable function transformations for automatic differentiation, automatic vectorization, and computation graph optimization. Lazy Evaluation: Computations in MLX are lazy. Arrays are only materialized when needed. Multi-device: Operations can run on any of the supported devices (CPU, GPU, …) The design of MLX is inspired by frameworks like PyTorch, Jax, and ArrayFire. A notable difference from these frameworks and MLX is the Unified Memory. Arrays in MLX live in shared memory. Operations on MLX arrays can be performed on any of the supported device types without performing data copies. Currently supported device types are the CPU and GPU. Other MLX Packages MLXRandom MLXNN MLXOptimizers MLXFFT Python mlx",
    "summary" : "MLX is a NumPy-like array framework designed for efficient and flexible machine learning research on Apple silicon, brought to you by Apple machine learning research",
    "title" : "MLX"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:_:)-4n0or"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of MLXArray from a sequence of HasDType values with an optional shape.  Discussion  Note: if the element type is Int this will produce an DType.int32 result. See init(int64:_:) if an .int64 is required. See Also Initialization",
    "summary" : "Initalizer allowing creation of MLXArray from a sequence of HasDType values with an optional shape.",
    "title" : "init(_:_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/sum(axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Sum reduce the array over the given axes.  axes to reduce over if true keep the reduces axes as singleton dimensions stream or device to evaluate on See Also Reduction Functions sum(axis:keepDims:stream:) sum(keepDims:stream:) sum(_:axes:keepDims:stream:)",
    "summary" : "Sum reduce the array over the given axes.",
    "title" : "sum(axes:keepDims:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/\/(_:_:)-7cmtz"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise division with a ScalarOrArray (scalar) argument.  See Also Arithmetic",
    "summary" : "Element-wise division with a ScalarOrArray (scalar) argument.",
    "title" : "\/(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/lexicographicallyPrecedes(_:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.lexicographicallyPrecedes(_:by:). ",
    "summary" : "Inherited from Sequence.lexicographicallyPrecedes(_:by:).",
    "title" : "lexicographicallyPrecedes(_:by:)"
  },
  {
    "headings" : [
      "Overview",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/subscript(from:to:stride:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Indexing using a stride.  Overview This method supports strided access, similar to python:  can be done in swift with:  See Also Indexing asStrided(_:_:strides:offset:stream:)",
    "summary" : "Indexing using a stride.",
    "title" : "subscript(from:to:stride:axis:stream:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/compile(enable:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Globally enable or disable compile(inputs:outputs:_:).  Discussion Default is enabled.",
    "summary" : "Globally enable or disable compile(inputs:outputs:_:).",
    "title" : "compile(enable:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ceil(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise ceil.  input array stream or device to evaluate on See Also Arithmetic floor(_:stream:)",
    "summary" : "Element-wise ceil.",
    "title" : "ceil(_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/takeAlong(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Take values along an axis at the specified indices from a flattened array.  the left hand side array should be broadcastable to the flattened array stream or device to evaluate on See Also Indexes ``takeAlong(::axis:stream:)",
    "summary" : "Take values along an axis at the specified indices from a flattened array.",
    "title" : "takeAlong(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/sorted(using:)-91uyg"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.sorted(using:). ",
    "summary" : "Inherited from Sequence.sorted(using:).",
    "title" : "sorted(using:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/padded(_:widths:value:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Pad an array with a constant value.  the array to pad array of int or pairs giving the before\/after amounts for each axis constant value to pad the edges with stream or device to evaluate on See Also Shapes padded(_:width:value:stream:)",
    "summary" : "Pad an array with a constant value.",
    "title" : "padded(_:widths:value:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/reshaped(_:_:stream:)-5x3y0"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Reshape an array while preserving the size.  Discussion  See Also Shapes reshaped(_:stream:) reshaped(_:_:stream:)",
    "summary" : "Reshape an array while preserving the size.",
    "title" : "reshaped(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Device\/CustomStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/uint64"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.uint64"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/squeezed(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Remove all length one axes from an array.  See Also Shapes squeezed(_:axes:stream:) squeezed(_:axis:stream:) squeezed(axes:stream:)",
    "summary" : "Remove all length one axes from an array.",
    "title" : "squeezed(_:stream:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/IndentedDescription\/description(indent:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the description with the given indent level.  Discussion This should apply successively nested indents to any children that can also be indented. See indentedDescription(_:_:) for an easy way to accomplish this.",
    "summary" : "Return the description with the given indent level.",
    "title" : "description(indent:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/remainder(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise remainder of division.  the left hand side array the right hand side array stream or device to evaluate on Discussion Computes the remainder of dividing lhs with rhs with Numpy Style Broadcasting. For example:  See Also Arithmetic",
    "summary" : "Element-wise remainder of division.",
    "title" : "remainder(_:_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/any(_:axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An or reduction over the given axes.  input array axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions any(_:axes:keepDims:stream:) any(_:keepDims:stream:) any(axes:keepDims:stream:)",
    "summary" : "An or reduction over the given axes.",
    "title" : "any(_:axis:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/notEqual(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise not equal.  the left hand side array the right hand side array stream or device to evaluate on Discussion Not equal on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators",
    "summary" : "Element-wise not equal.",
    "title" : "notEqual(_:_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/logSumExp(axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A log-sum-exp reduction over the given axes.  axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion The log-sum-exp reduction is a numerically stable version of:  See Also Reduction Functions logSumExp(axis:keepDims:stream:) logSumExp(keepDims:stream:) logSumExp(_:axes:keepDims:stream:)",
    "summary" : "A log-sum-exp reduction over the given axes.",
    "title" : "logSumExp(axes:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/subscript(_:stream:)-7n5nw"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "subscript(_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/square(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise square.  See Also Arithmetic square(_:stream:)",
    "summary" : "Element-wise square.",
    "title" : "square(stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/sum(_:axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Sum reduce the array over the given axes.  input array axes to reduce over if true keep the reduces axes as singleton dimensions stream or device to evaluate on See Also Reduction Functions sum(_:axis:keepDims:stream:) sum(_:keepDims:stream:) sum(axes:keepDims:stream:)",
    "summary" : "Sum reduce the array over the given axes.",
    "title" : "sum(_:axes:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/publisher"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.15",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "6.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.publisher. ",
    "summary" : "Inherited from Sequence.publisher.",
    "title" : "publisher"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/linspace(_:_:count:stream:)-92x6l"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Generate num evenly spaced numbers over interval [start, stop] for BinaryFloatingPoint.  start value stop value number of samples stream or device to evaluate on Discussion Example:  See Also Initialization linspace(_:_:count:stream:)",
    "summary" : "Generate num evenly spaced numbers over interval [start, stop] for BinaryFloatingPoint.",
    "title" : "linspace(_:_:count:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/-(_:_:)-971j0"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise subtraction with a ScalarOrArray (scalar) argument.  See Also Arithmetic MLXArray\/-(_:_:)-7frdo",
    "summary" : "Element-wise subtraction with a ScalarOrArray (scalar) argument.",
    "title" : "-(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Device\/description"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomStringConvertible.description. ",
    "summary" : "Inherited from CustomStringConvertible.description.",
    "title" : "description"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/*(_:_:)-7441r"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise multiplication with a ScalarOrArray (scalar) argument.  See Also Arithmetic *(_:_:)",
    "summary" : "Element-wise multiplication with a ScalarOrArray (scalar) argument.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt32\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int16\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/bfloat16"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.bfloat16"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/index(_:offsetBy:limitedBy:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.index(_:offsetBy:limitedBy:). ",
    "summary" : "Inherited from Collection.index(_:offsetBy:limitedBy:).",
    "title" : "index(_:offsetBy:limitedBy:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/publisher"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.15",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "6.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.publisher. ",
    "summary" : "Inherited from Sequence.publisher.",
    "title" : "publisher"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/subscript(unwrapping:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "subscript(unwrapping:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/product(_:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A product reduction over the entire array.  input array if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions product(_:axes:keepDims:stream:) product(_:axis:keepDims:stream:) product(axes:keepDims:stream:)",
    "summary" : "A product reduction over the entire array.",
    "title" : "product(_:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/flattened(start:end:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Flatten an array.  first dimension to flatten last dimension to flatten Discussion For example:  See Also Shapes flattened(_:start:end:stream:)",
    "summary" : "Flatten an array.",
    "title" : "flattened(start:end:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/reduce(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.reduce(_:_:). ",
    "summary" : "Inherited from Sequence.reduce(_:_:).",
    "title" : "reduce(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/prefix(upTo:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.prefix(upTo:). ",
    "summary" : "Inherited from Collection.prefix(upTo:).",
    "title" : "prefix(upTo:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/drop(while:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.drop(while:). ",
    "summary" : "Inherited from Collection.drop(while:).",
    "title" : "drop(while:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/variance(axis:keepDims:ddof:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Compute the variance(s) over the given axes  axes to reduce over if true keep the reduces axis as singleton dimensions the divisor to compute the variance is N - ddof See Also Reduction Functions variance(axes:keepDims:ddof:stream:) variance(keepDims:ddof:stream:) variance(_:axes:keepDims:ddof:stream:)",
    "summary" : "Compute the variance(s) over the given axes",
    "title" : "variance(axis:keepDims:ddof:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Array\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [
      "Overview",
      "LinearFunctionModelTraining",
      "llm-tool",
      "mnist-tool"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/examples"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Swift example code for MLX and MLXNN. Overview Example software for MLX and MLXNN. LinearFunctionModelTraining A simple linear function model and a training loop. llm-tool A command line tool for generating text using a Llama \/ Mistral model. mnist-tool A command line tool for training an MNIST (MLP) model.",
    "summary" : "Swift example code for MLX and MLXNN.",
    "title" : "MLX Swift Examples"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/logSumExp(_:axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A log-sum-exp reduction over the given axis.  input array axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion The log-sum-exp reduction is a numerically stable version of:  See Also Reduction Functions logSumExp(_:axes:keepDims:stream:) logSumExp(_:keepDims:stream:) logSumExp(axes:keepDims:stream:)",
    "summary" : "A log-sum-exp reduction over the given axis.",
    "title" : "logSumExp(_:axis:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/logicalNot(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise logical not.  input array stream or device to evaluate on Discussion For example:  See Also Arithmetic Logical Operators",
    "summary" : "Element-wise logical not.",
    "title" : "logicalNot(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/mapValues(_:transform:)-54sj2"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the values in the nested structure using the transform() function while simultaneously iterating the same structure in a second NestedDictionary.  Discussion This transforms both values simultaneously and produces two new NestedDictionary conceptually somewhat like map(zip(i1, i2)). The structure of the second NestedDictionary should be identical to the first but these exceptions are allowed: .none will match any value, e.g. you can iterate an empty second item arrays do not need to be the same length – the receiver’s length is matched dictionaries do not need to have the same keys – the receivers keys are matched See Also mapValues(_:_:) mapValues(_:_:transform:)",
    "summary" : "Transform the values in the nested structure using the transform() function while simultaneously iterating the same structure in a second NestedDictionary.",
    "title" : "mapValues(_:transform:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/grad(_:)-7z6i"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "grad(_:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/shapes"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Shape is a term to describe the number and size of the dimensions of an N dimension (ND) array. Overview MLXArray is an N dimensional array.  The number of dimensions is described by ndim and the size of each dimension can be examined with dim(_:) or shape. Some of these functions can manipulate the shape without changing the contents while others will moves rows and columns as they modify the shape.",
    "summary" : "Shape is a term to describe the number and size of the dimensions of an N dimension (ND) array.",
    "title" : "Shapes"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/none"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "NestedItem.none"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/dequantized(_:scales:biases:groupSize:bits:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Dequantize the matrix w using the provided scales and biases and the group_size and bits configuration.  Discussion For details, please see this documentation See Also quantized(_:groupSize:bits:stream:) quantizedMatmul(_:_:scales:biases:transpose:groupSize:bits:stream:)",
    "summary" : "Dequantize the matrix w using the provided scales and biases and the group_size and bits configuration.",
    "title" : "dequantized(_:scales:biases:groupSize:bits:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/log(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise natural logarithm.  See Also Arithmetic log(_:stream:)",
    "summary" : "Element-wise natural logarithm.",
    "title" : "log(stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/repeat(_:count:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Repeat an array along a specified axis.  array to repeat number of times to repeat axis to repeat along stream or device to evaluate on Discussion Example:  See Also Initialization repeat(_:count:stream:) full(_:values:stream:)",
    "summary" : "Repeat an array along a specified axis.",
    "title" : "repeat(_:count:axis:stream:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/item(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the scalar value of the array.  Discussion It is a contract violation to call this on an array with more than one element. If the type does not match the dtype this will convert the type first. ",
    "summary" : "Return the scalar value of the array.",
    "title" : "item(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/subscript(_:)-27we2"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.subscript(_:). ",
    "summary" : "Inherited from Collection.subscript(_:).",
    "title" : "subscript(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/underestimatedCount"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.underestimatedCount. ",
    "summary" : "Inherited from Sequence.underestimatedCount.",
    "title" : "underestimatedCount"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int16\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int32\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/flattenedValues()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a flattened representation of the structured contents as an array of values.  Discussion Note that unlike flattened(prefix:) this cannot be reconstructed back into the original structure See Also flattened(prefix:)",
    "summary" : "Return a flattened representation of the structured contents as an array of values.",
    "title" : "flattenedValues()"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/negative(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise negation.  input array stream or device to evaluate on Discussion Negate the values in the array. For example:  See Also Arithmetic",
    "summary" : "Element-wise negation.",
    "title" : "negative(_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/split(_:indices:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Split an array along a given axis.  input array the indices of the start of each subarray along the given axis axis to split along See Also Shapes split(_:parts:axis:stream:) split(indices:axis:stream:)",
    "summary" : "Split an array along a given axis.",
    "title" : "split(_:indices:axis:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/subtract(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise subtraction.  the left hand side array the right hand side array stream or device to evaluate on Discussion Subtract two arrays with Numpy Style Broadcasting. For example:  See Also Arithmetic",
    "summary" : "Element-wise subtraction.",
    "title" : "subtract(_:_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/._=(_:_:)-2gqml"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise less greater than or equal.  Discussion Greater than or equal on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators greaterEqual(_:_:stream:)",
    "summary" : "Element-wise less greater than or equal.",
    "title" : ".>=(_:_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/reciprocal(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise reciprocal.  See Also Arithmetic reciprocal(stream:)",
    "summary" : "Element-wise reciprocal.",
    "title" : "reciprocal(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/mapValues(_:_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the values in the nested structure using the transform() function while simultaneously iterating the same structure in a second and third NestedItem.  Discussion This transforms all three values simultaneously and produces three new NestedItem conceptually somewhat like map(zip(i1, i2, i3)). The structure of the second and third NestedItem should be identical to the first but these exceptions are allowed: .none will match any value, e.g. you can iterate an empty second item arrays do not need to be the same length – the receiver’s length is matched dictionaries do not need to have the same keys – the receivers keys are matched This is typically called via mapValues(_:_:transform:). See Also mapValues(_:_:transform:) mapValues(_:_:_:)",
    "summary" : "Transform the values in the nested structure using the transform() function while simultaneously iterating the same structure in a second and third NestedItem.",
    "title" : "mapValues(_:_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/reversed()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.reversed(). ",
    "summary" : "Inherited from Sequence.reversed().",
    "title" : "reversed()"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/any(_:axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An or reduction over the given axes.  input array axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions any(_:axis:keepDims:stream:) any(_:keepDims:stream:) any(axes:keepDims:stream:)",
    "summary" : "An or reduction over the given axes.",
    "title" : "any(_:axes:keepDims:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/sqrt(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise square root  See Also Arithmetic sqrt(_:stream:)",
    "summary" : "Element-wise square root",
    "title" : "sqrt(stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/init()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initialize an empty NestedDictionary.  See Also subscript(_:)",
    "summary" : "Initialize an empty NestedDictionary.",
    "title" : "init()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/prefix(through:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.prefix(through:). ",
    "summary" : "Inherited from Collection.prefix(through:).",
    "title" : "prefix(through:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt8\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/allClose(_:_:rtol:atol:equalNaN:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Approximate comparison of two arrays.  input array array to compare to relative tolerance (see discussion) absolute tolerance (see discussion) if true treat NaN values as equal to each other stream or device to evaluate on Discussion The arrays are considered equal if:  Note unlike arrayEqual(_:_:equalNAN:stream:), this function supports Numpy Style Broadcasting. For example:  See Also Logical Operators arrayEqual(_:_:equalNAN:stream:) arrayEqual(_:equalNAN:stream:)",
    "summary" : "Approximate comparison of two arrays.",
    "title" : "allClose(_:_:rtol:atol:equalNaN:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/eval(_:)-3b2g9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Evaluate one or more MLXArray.  Discussion This variant allows several structured types:  Other structured types may be supported – check the implementation. See Also Lazy Evaluation",
    "summary" : "Evaluate one or more MLXArray.",
    "title" : "eval(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/argMax(_:axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Indices of the maximum values along the axis.  input array axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Indexes argMax(_:keepDims:stream:) argMin(_:axis:keepDims:stream:) argMax(axis:keepDims:stream:)",
    "summary" : "Indices of the maximum values along the axis.",
    "title" : "argMax(_:axis:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/startIndex"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.startIndex. ",
    "summary" : "Inherited from Collection.startIndex.",
    "title" : "startIndex"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/sorted(using:)-24lgs"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.sorted(using:). ",
    "summary" : "Inherited from Sequence.sorted(using:).",
    "title" : "sorted(using:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/variance(axes:keepDims:ddof:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Compute the variance(s) over the given axes  axes to reduce over if true keep the reduces axes as singleton dimensions the divisor to compute the variance is N - ddof See Also Reduction Functions variance(axis:keepDims:ddof:stream:) variance(keepDims:ddof:stream:) variance(_:axes:keepDims:ddof:stream:)",
    "summary" : "Compute the variance(s) over the given axes",
    "title" : "variance(axes:keepDims:ddof:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/imaginaryPart(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Extract the imaginary part of a DType.complex64 array.  See Also Conversion",
    "summary" : "Extract the imaginary part of a DType.complex64 array.",
    "title" : "imaginaryPart(stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/lexicographicallyPrecedes(_:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.lexicographicallyPrecedes(_:by:). ",
    "summary" : "Inherited from Sequence.lexicographicallyPrecedes(_:by:).",
    "title" : "lexicographicallyPrecedes(_:by:)"
  },
  {
    "headings" : [
      "Indexing",
      "Name Mapping",
      "Swift Naming",
      "mx.array methods",
      "mx free functions"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/converting-python"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Common patterns from python and mapping mlx function names. Indexing MLXArray supports many types of indexes (see Indexing) – some of the python mx.array indexing modes are supported directly, though written differenty.  Some of them require different calls. Here is a mapping of some observed calls: Python code Swift Code array[10] array[10] array[-1] array[-1] – this works on MLXArray but not swift arrays in general. array.shape[0] array.dim(0) or array.shape[0] array.shape[-1] array.dim(-1) array[1, 2, 3] array[1, 2, 3] array[2:8] array[2 ..< 8] array[:, :8, 8:] array[0..., ..<8, 8...] array[array2] array[array2] array[array2, array3] array[array2, array3] – numpy style advanced indexing array[None] array.expandedDimensions(axis: 0) array[:, None] array.expandedDimensions(axis: 1) array[..., None] array.expandedDimensions(axis: -1) array[:, -1, :] array[-1, axis: 1] array[..., ::2] array[stride: 2, axis: -1] [array] * 4 Array(repeating: array, count: 4) array.shape[:-1] array.shape.dropLast()  Name Mapping Swift Naming Note that the element-wise logical operations such as: .==(_:_:) .==(_:_:) are named using the Swift convention for SIMD operations, e.g. .==, .<, etc.  These operators produce a new MLXArray with true\/false values for the elementwise comparison. Functions and method are typically named in a similar fashion changing snake_case to camelCase.  A few exceptions to that rule follow swift naming for functions that have no side effects.  For example: flatten() becomes flattened(_:start:end:stream:) reshape() becomes reshaped(_:_:stream:) moveaxis() becomes movedAxis(_:source:destination:stream:) and so on. mx.array methods Here is a mapping of python mx.array methods to their MLXArray counterparts.\nNote: some of the symbols are not linkable. mx.array method MLXArray method __init__ see Initialization __repr__ description __eq__ .==(_:_:) size size ndim ndim itemsize itemSize nbytes nbytes shape shape dtype dtype item item(_:) tolist asArray(_:) astype asType(_:stream:) or asType(_:stream:) __getitem__ [1] subscript(_:stream:) \"__getitem__ [1, 2]\" subscript(_:stream:) __getitem__ [1:3] subscript(_:stream:) __getitem__ [mlx.array] subscript(_:stream:) __len__ count __iter__ implements Sequence __add__ +(_:_:) __sub__ - __mul__ *(_:_:) __truediv__ \/ __div__ \/ __floordiv__ floorDivide(_:stream:) __mod__ %(_:_:) __eq__ .==(_:_:) __lt__ .<(_:_:) __le__ .<=(_:_:) __gt__ .>(_:_:) __ge__ .>=(_:_:) __ne__ .!=(_:_:) __neg__ -(_:) __bool__ all(keepDims:stream:) + item() __repr__ description __matmul__ matmul(_:stream:) __pow__ **(_:_:) abs abs(stream:) all all(axes:keepDims:stream:) any any(axes:keepDims:stream:) argmax argMax(axis:keepDims:stream:) argmin argMin(axis:keepDims:stream:) cos cos(stream:) cummax cummax(axis:reverse:inclusive:stream:) cummin cummin(axis:reverse:inclusive:stream:) cumprod cumprod(axis:reverse:inclusive:stream:) cumsum cumsum(axis:reverse:inclusive:stream:) exp exp(stream:) flatten flattened(start:end:stream:) log log(stream:) log10 log10(stream:) log1p log1p(stream:) log2 log2(stream:) logsumexp logSumExp(axes:keepDims:stream:) max max(axes:keepDims:stream:) mean mean(axes:keepDims:stream:) min min(axes:keepDims:stream:) moveaxis movedAxis(source:destination:stream:) prod product(axes:keepDims:stream:) reciprocal reciprocal(stream:) reshape reshaped(_:stream:) round round(decimals:stream:) rsqrt rsqrt(stream:) sin sin(stream:) split split(parts:axis:stream:) sqrt sqrt(stream:) square square(stream:) squeeze squeezed(axes:stream:) sum sum(axes:keepDims:stream:) swapaxes swappedAxes(_:_:stream:) T T transpose transposed(_:stream:) var variance(axes:keepDims:ddof:stream:)  mx free functions This is a mapping of mx free functions to their MLX counterparts. mx.array free function MLX free function abs abs(_:stream:) add add(_:_:stream:) all all(_:axes:keepDims:stream:) allclose allClose(_:_:rtol:atol:equalNaN:stream:) any any(_:axes:keepDims:stream:) arange init(_:_:) arccos acos(_:stream:) arccosh acosh(_:stream:) arcsin asin(_:stream:) arcsinh asinh(_:stream:) arctan atan(_:stream:) arctanh atanh(_:stream:) argmax argMax(_:axis:keepDims:stream:) argmin argMin(_:axis:keepDims:stream:) argpartition argPartition(_:kth:axis:stream:) argsort argSort(_:axis:stream:) array_equal arrayEqual(_:_:equalNAN:stream:) as_strided asStrided(_:_:strides:offset:stream:) broadcast_to broadcast(_:to:stream:) ceil ceil(_:stream:) clip clip(_:min:max:stream:) concatenate concatenated(_:axis:stream:) conv1d conv1d(_:_:stride:padding:dilation:groups:stream:) conv2d conv2d(_:_:stride:padding:dilation:groups:stream:) convolve convolve(_:_:mode:stream:) cos cos(_:stream:) cosh cosh(_:stream:) cummax cummax(_:axis:reverse:inclusive:stream:) cummin cummin(_:axis:reverse:inclusive:stream:) cumprod cumprod(_:axis:reverse:inclusive:stream:) cumsum cumsum(_:axis:reverse:inclusive:stream:) dequantize dequantized(_:scales:biases:groupSize:bits:stream:) divide divide(_:_:stream:) equal equal(_:_:stream:) erf erf(_:stream:) erfinv erfInverse(_:stream:) exp exp(_:stream:) expand_dims expandedDimensions(_:axes:stream:) eye eye(_:m:k:type:stream:) flatten flattened(_:start:end:stream:) floor floor(_:stream:) floor_divide floorDivide(_:_:stream:) full full(_:values:type:stream:) greater greater(_:_:stream:) greater_equal greaterEqual(_:_:stream:) identity identity(_:type:stream:) less less(_:_:stream:) less_equal lessEqual(_:_:stream:) linspace linspace(_:_:count:stream:) load loadArray(url:stream:) and loadArrays(url:stream:) log log(_:stream:) log10 log10(_:stream:) log1p log1p(_:stream:) log2 log2(_:stream:) logaddexp logAddExp(_:_:stream:) logical_not logicalNot(_:stream:) logsumexp logSumExp(_:axes:keepDims:stream:) matmul matmul(_:_:stream:) max max(_:axes:keepDims:stream:) maximum maximum(_:_:stream:) mean mean(_:axes:keepDims:stream:) min min(_:axes:keepDims:stream:) minimum minimum(_:_:stream:) moveaxis movedAxis(_:source:destination:stream:) multiply multiply(_:_:stream:) negative negative(_:stream:) not_equal notEqual(_:_:stream:) ones ones(_:type:stream:) ones_like ones(like:stream:) pad padded(_:widths:value:stream:) partition partitioned(_:kth:axis:stream:) power pow(_:_:stream:) prod product(_:axes:keepDims:stream:) quantize quantized(_:groupSize:bits:stream:) quantized_matmul quantizedMatmul(_:_:scales:biases:transpose:groupSize:bits:stream:) reciprocal reciprocal(_:stream:) remainder remainder(_:_:stream:) repeat repeat(_:count:axis:stream:) reshape reshaped(_:_:stream:) round round(_:decimals:stream:) rsqrt rsqrt(_:stream:) save save(array:url:stream:) and save(arrays:url:stream:) save_safetensors save(arrays:url:stream:) savez not supported savez_compressed not supported sigmoid sigmoid(_:stream:) sign sign(_:stream:) sin sin(_:stream:) sinh sinh(_:stream:) softmax softMax(_:axes:stream:) sort sorted(_:axis:stream:) split split(_:parts:axis:stream:) sqrt sqrt(_:stream:) square square(_:stream:) squeeze squeezed(_:axes:stream:) stack stacked(_:axis:stream:) stop_gradient stopGradient(_:stream:) subtract subtract(_:_:stream:) sum sum(_:axes:keepDims:stream:) swapaxes swappedAxes(_:_:_:stream:) take take(_:_:axis:stream:) take_along_axis takeAlong(_:_:axis:stream:) tan tan(_:stream:) tanh tanh(_:stream:) topk top(_:k:axis:stream:) transpose transposed(_:axes:stream:) tri tri(_:m:k:type:stream:) tril tril(_:k:stream:) triu triu(_:k:stream:) var variance(_:axes:keepDims:ddof:stream:) where which(_:_:_:stream:) zeros zeros(_:type:stream:) zeros_like zeros(like:stream:) ",
    "summary" : "Common patterns from python and mapping mlx function names.",
    "title" : "Converting From Python"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/init(item:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initialize with a NestedItem.  Discussion This must be a NestedItem.dictionary(_:).",
    "summary" : "Initialize with a NestedItem.",
    "title" : "init(item:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/logical"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Evaluating logical operations on MLXArray. Overview MLXArray has a number of logical operators, instance methods and free functions.  Single or multiple arrayscan be combined using these operators:  These can be used for control flow, though consider Lazy Evaluation when doing this: ",
    "summary" : "Evaluating logical operations on MLXArray.",
    "title" : "Logical Operators"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/divide(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise division.  the left hand side array the right hand side array stream or device to evaluate on Discussion Divide two arrays with Numpy Style Broadcasting. For example:  See Also Arithmetic",
    "summary" : "Element-wise division.",
    "title" : "divide(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/transposed(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "transposed(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/asImaginary(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Convert the real array into a DType.complex64 imaginary part.  Discussion This is equivalent to the following in python:  See Also init(real:imaginary:) realPart(stream:) imaginaryPart(stream:) Conversion",
    "summary" : "Convert the real array into a DType.complex64 imaginary part.",
    "title" : "asImaginary(stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/IndentedDescription\/description"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "description"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/identity(_:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create a square identity matrix.  number of rows and columns in the output data type of the output array stream or device to evaluate on Discussion Example:  See Also Initialization eye(_:m:k:type:stream:)",
    "summary" : "Create a square identity matrix.",
    "title" : "identity(_:type:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/add(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise addition.  the left hand side array the right hand side array stream or device to evaluate on Discussion Add two arrays with Numpy Style Broadcasting. See Also Arithmetic +(_:_:)",
    "summary" : "Element-wise addition.",
    "title" : "add(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/sorted(using:)-5led6"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.sorted(using:). ",
    "summary" : "Inherited from Sequence.sorted(using:).",
    "title" : "sorted(using:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/dictionary(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "NestedItem.dictionary(_:)"
  },
  {
    "headings" : [
      "Overview",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Device"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Representation of a Device in MLX.  Overview Typically this is used via the stream:  parameter on a method with a StreamOrDevice:  Read more at Using Streams. See Also Using Streams StreamOrDevice",
    "summary" : "Representation of a Device in MLX.",
    "title" : "Device"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/array(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "NestedItem.array(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/map(_:)-2a26y"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.map(_:). ",
    "summary" : "Inherited from Collection.map(_:).",
    "title" : "map(_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/triu(_:k:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Zeros the array below the given diagonal.  input array the diagonal of the 2-D array stream or device to evaluate on See Also tril(_:k:stream:)",
    "summary" : "Zeros the array below the given diagonal.",
    "title" : "triu(_:k:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Float"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "Float"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/-(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Unary element-wise negation.  Discussion Negate the values in the array. For example:  See Also negative(_:stream:)",
    "summary" : "Unary element-wise negation.",
    "title" : "-(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/floorDivide(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise integer division..  Discussion Divide two arrays with Numpy Style Broadcasting. If either array is a floating point type then it is equivalent to calling floor(_:stream:) after \/. For example:  See Also Arithmetic floor(_:stream:)",
    "summary" : "Element-wise integer division..",
    "title" : "floorDivide(_:_:stream:)"
  },
  {
    "headings" : [
      "Introduction",
      "Thread Safety",
      "Memory Safety"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An N dimensional array.  The main type in mlx.  Introduction MLXArray is an N dimension array that can contain a variety of data types (DType). MLXArray supports a wide range of functions and operations to manipulate it and is used as the basis for the MLXNN module which implements many layers that are the basis for building machine learning models.  Thread Safety MXArray is not thread safe. Although MLXArray looks like a normal multidimensional array, it is actually far more sophisticated.  It actually holds a promise for future computations, see Lazy Evaluation and is thus not thread safe.  For example:  c is not the result of a + b but rather a graph representing a and b (which in turn may be large unresolved graphs) and the addition operator that combines them.  It is not safe to create c in one thread and consume\/evaluate it in another. Memory Safety MXArray is not memory safe. Unlike swift Array, MXArray is not memory safe – use caution when using indexing operators. For example:  Will print a random value from outside a.",
    "summary" : "An N dimensional array.  The main type in mlx.",
    "title" : "MLXArray"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/cummin(reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative minimum of the elements over the flattened array.  Discussion  See Also Cumulative Operations cummin(axis:reverse:inclusive:stream:) cummin(_:axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative minimum of the elements over the flattened array.",
    "title" : "cummin(reverse:inclusive:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/arrayEqual(_:equalNAN:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Array equality check.  Discussion Compare two arrays for equality. Returns True if and only if the arrays have the same shape and their values are equal. The arrays need not have the same type to be considered equal.  See Also Logical Operators allClose(_:rtol:atol:equalNaN:stream:) ``MLXArray\/==(::)` arrayEqual(_:_:equalNAN:stream:)",
    "summary" : "Array equality check.",
    "title" : "arrayEqual(_:equalNAN:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/any(axis:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An or reduction over the given axes.  axis to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions any(axes:keepDims:stream:) any(keepDims:stream:) any(_:axes:keepDims:stream:)",
    "summary" : "An or reduction over the given axes.",
    "title" : "any(axis:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/allSatisfy(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.allSatisfy(_:). ",
    "summary" : "Inherited from Sequence.allSatisfy(_:).",
    "title" : "allSatisfy(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/StreamOrDevice\/cpu"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The defaultStream(_:) on the cpu ",
    "summary" : "The defaultStream(_:) on the cpu",
    "title" : "cpu"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/cummax(_:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative maximum of the elements over the flattened array.  Discussion  See Also Cumulative Operations cummax(_:axis:reverse:inclusive:stream:) cummax(axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative maximum of the elements over the flattened array.",
    "title" : "cummax(_:reverse:inclusive:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/max(axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A max reduction over the given axes.  axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions max(axis:keepDims:stream:) max(keepDims:stream:) max(_:axes:keepDims:stream:)",
    "summary" : "A max reduction over the given axes.",
    "title" : "max(axes:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/strides"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Strides of the array.  Discussion ",
    "summary" : "Strides of the array.",
    "title" : "strides"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/argSort(_:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the indices that sort the array.  input array axis to sort over stream or device to evaluate on Discussion  See Also Indexes argSort(_:stream:)",
    "summary" : "Returns the indices that sort the array.",
    "title" : "argSort(_:axis:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/loadArrays(url:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Load dictionary of MLXArray from a safetensors file.  URL of file to load stream or device to evaluate on See Also loadArray(url:stream:) save(array:url:stream:) save(arrays:url:stream:)",
    "summary" : "Load dictionary of MLXArray from a safetensors file.",
    "title" : "loadArrays(url:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/pow(_:_:stream:)-49xi0"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "pow(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/min(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.min(by:). ",
    "summary" : "Inherited from Sequence.min(by:).",
    "title" : "min(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Float\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/save(arrays:url:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Save dictionary of arrays in safetensors format.  array to save URL of file to load stream or device to evaluate on See Also save(arrays:url:stream:) loadArray(url:stream:) loadArrays(url:stream:)",
    "summary" : "Save dictionary of arrays in safetensors format.",
    "title" : "save(arrays:url:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/reshaped(_:stream:)-19x5z"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Reshape an array while preserving the size.  Discussion  See Also Shapes reshaped(_:stream:) reshaped(_:_:stream:)",
    "summary" : "Reshape an array while preserving the size.",
    "title" : "reshaped(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/elementsEqual(_:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.elementsEqual(_:by:). ",
    "summary" : "Inherited from Sequence.elementsEqual(_:by:).",
    "title" : "elementsEqual(_:by:)"
  },
  {
    "headings" : [
      "",
      "Why Lazy Evaluation",
      "Transforming Compute Graphs",
      "Only Compute What You Use",
      "When to Evaluate"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/lazy-evaluation"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computation in MLX is lazy.  Understand when the graph is evaluated.  See also mlx python docs. Why Lazy Evaluation When you perform operations in MLX, no computation actually happens. Instead a compute graph is recorded. The actual computation only happens if an eval(_:) is performed or an implicit eval is triggered. MLX uses lazy evaluation because it has some nice features, some of which we describe below. Transforming Compute Graphs Lazy evaluation let’s us record a compute graph without actually doing any computations. This is useful for function transformations like grad and vmap and graph optimizations like simplify. Currently, MLX does not compile and rerun compute graphs. They are all generated dynamically. However, lazy evaluation makes it much easier to integrate compilation for future performance enhancements. Only Compute What You Use In MLX you do not need to worry as much about computing outputs that are never used. For example:  Here, we never actually compute the output of expensiveFunction. Use this pattern with care though, as the graph of expensiveFunction is still built, and that has some cost associated to it. Similarly, lazy evaluation can be beneficial for saving memory while keeping code simple. Say you have a very large model Model derived from Module. You can instantiate this model with model = Model(). Typically, this will initialize all of the weights as float32, but the initialization does not actually compute anything until you perform an eval(_:). If you update the model with float16 weights, your maximum consumed memory will be half that required if eager computation was used instead. This pattern is simple to do in MLX thanks to lazy computation:  When to Evaluate A common question is when to use eval(_:). The trade-off is between letting graphs get too large and not batching enough useful work. For example:  This is a bad idea because there is some fixed overhead with each graph evaluation. On the other hand, there is some slight overhead which grows with the compute graph size, so extremely large graphs (while computationally correct) can be costly. Luckily, a wide range of compute graph sizes work pretty well with MLX: anything from a few tens of operations to many thousands of operations per evaluation should be okay. Most numerical computations have an iterative outer loop (e.g. the iteration in stochastic gradient descent). A natural and usually efficient place to use eval(_:) is at each iteration of this outer loop. Here is a concrete example:  An important behavior to be aware of is when the graph will be implicitly evaluated. Anytime you print an array, or otherwise access it’s memory, the graph will be evaluated. Saving arrays via save(arrays:url:stream:) (or any other MLX saving functions) will also evaluate the array. Calling item(_:) on a scalar array will also evaluate it. In the example above, printing the loss (print(loss)) or adding the loss scalar to a list (losses.append(loss.item(Float.self))) would cause a graph evaluation. If these lines are before eval(loss, model.parameters()) then this will be a partial evaluation, computing only the forward pass. Also, calling eval(_:) on an array or set of arrays multiple times is perfectly fine. This is effectively a no-op. Using scalar arrays for control-flow will cause an evaluation. Here is an example:  Using arrays for control flow should be done with care. The above example works and can even be used with gradient transformations. However, this can be very inefficient if evaluations are done too frequently.",
    "summary" : "Computation in MLX is lazy.  Understand when the graph is evaluated.",
    "title" : "Lazy Evaluation"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/all(axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An and reduction over the given axes.  axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions all(axis:keepDims:stream:) all(keepDims:stream:) all(_:axes:keepDims:stream:)",
    "summary" : "An and reduction over the given axes.",
    "title" : "all(axes:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/subscript(_:stream:)-82jwt"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "subscript(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/filter(_:)-7z3ih"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "17.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "14.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "17.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.filter(_:). ",
    "summary" : "Inherited from Sequence.filter(_:).",
    "title" : "filter(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/uint16"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.uint16"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/max(_:axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A max reduction over the given axes.  input array axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions max(_:axis:keepDims:stream:) max(_:keepDims:stream:) max(axes:keepDims:stream:)",
    "summary" : "A max reduction over the given axes.",
    "title" : "max(_:axes:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/min(_:axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A min reduction over the given axes.  input array axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions min(_:axis:keepDims:stream:) min(_:keepDims:stream:) min(axes:keepDims:stream:)",
    "summary" : "A min reduction over the given axes.",
    "title" : "min(_:axes:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/full(_:values:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array with the given value.  shape of the output array values to be bradcast into the array stream or device to evaluate on Discussion Constructs an array of size shape filled with vals. If vals is an :obj:array it must be Numpy Style Broadcasting to the given shape. Example:  See Also Initialization full(_:values:type:stream:) repeat(_:count:axis:stream:)",
    "summary" : "Construct an array with the given value.",
    "title" : "full(_:values:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int32"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "Int32"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/transposed(axes:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transpose the dimensions of the array.  Specifies the source axis for each axis in the new array See Also Shapes transposed(axis:stream:) transposed(stream:) transposed(_:axes:stream:)",
    "summary" : "Transpose the dimensions of the array.",
    "title" : "transposed(axes:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/isComplex"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "isComplex"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/variance(_:axis:keepDims:ddof:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Compute the variance(s) over the given axes  input array axes to reduce over if true keep the reduces axis as singleton dimensions the divisor to compute the variance is N - ddof See Also Reduction Functions variance(_:axes:keepDims:ddof:stream:) variance(_:keepDims:ddof:stream:) variance(axes:keepDims:ddof:stream:)",
    "summary" : "Compute the variance(s) over the given axes",
    "title" : "variance(_:axis:keepDims:ddof:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/partitioned(_:kth:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a partitioned copy of the flattened array such that the smaller kth elements are first.  input array Element at the kth index will be in its sorted position in the output. All elements before the kth index will be less or equal to the kth element and all elements after will be greater or equal to the kth element in the output. stream or device to evaluate on Discussion The ordering of the elements in partitions is undefined. See Also Sorting partitioned(_:kth:axis:stream:) argPartition(_:kth:axis:stream:)",
    "summary" : "Returns a partitioned copy of the flattened array such that the smaller kth elements are first.",
    "title" : "partitioned(_:kth:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/transposed(stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transpose the dimensions of the array.  Discussion With no axes specified this will reverse the axes in the array. See Also Shapes transposed(axes:stream:) transposed(axis:stream:) transposed(_:axes:stream:)",
    "summary" : "Transpose the dimensions of the array.",
    "title" : "transposed(stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/erf(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise error function.  input array stream or device to evaluate on Discussion For details, please see this documentation See Also Arithmetic erfInverse(_:stream:)",
    "summary" : "Element-wise error function.",
    "title" : "erf(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/unflattened(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Convert a flattened list of key\/value tuples back into a NestedItem structure.  Discussion This is typically called via unflattened(_:). See Also flattened(prefix:) flattened(prefix:) unflattened(_:) unflattened(_:)",
    "summary" : "Convert a flattened list of key\/value tuples back into a NestedItem structure.",
    "title" : "unflattened(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/argMax(_:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Indices of the maximum value over the entire array.  input array if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Indexes argMax(_:axis:keepDims:stream:) argMin(_:axis:keepDims:stream:) argMax(axis:keepDims:stream:)",
    "summary" : "Indices of the maximum value over the entire array.",
    "title" : "argMax(_:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/values"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "values"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/suffix(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.suffix(_:). ",
    "summary" : "Inherited from Sequence.suffix(_:).",
    "title" : "suffix(_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/squeezed(axes:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Remove length one axes from an array.  axes to remove See Also Shapes squeezed(axis:stream:) squeezed(stream:) squeezed(_:axes:stream:)",
    "summary" : "Remove length one axes from an array.",
    "title" : "squeezed(axes:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/nbytes"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Number of bytes in the array. ",
    "summary" : "Number of bytes in the array.",
    "title" : "nbytes"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/arrayEqual(_:_:equalNAN:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Array equality check.  Discussion Compare two arrays for equality. Returns True if and only if the arrays have the same shape and their values are equal. The arrays need not have the same type to be considered equal.  See Also Logical Operators allClose(_:_:rtol:atol:equalNaN:stream:) .==(_:_:) arrayEqual(_:equalNAN:stream:)",
    "summary" : "Array equality check.",
    "title" : "arrayEqual(_:_:equalNAN:stream:)"
  },
  {
    "headings" : [
      "Overview",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/StreamOrDevice"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Parameter type for all MLX operations.  Overview Use this to control where operations are evaluated:  If omitted it will use the default, which will be gpu unless set otherwise. See Also Using Streams Stream Device",
    "summary" : "Parameter type for all MLX operations.",
    "title" : "StreamOrDevice"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DeviceType\/cpu"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DeviceType.cpu"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/squeezed(_:axes:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Remove length one axes from an array.  input array axes to remove See Also Shapes squeezed(_:axis:stream:) squeezed(_:stream:) squeezed(axes:stream:)",
    "summary" : "Remove length one axes from an array.",
    "title" : "squeezed(_:axes:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/take(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Take elements from flattened 1-D array.  See Also take(_:_:axis:stream:) take(_:axis:stream:)",
    "summary" : "Take elements from flattened 1-D array.",
    "title" : "take(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/softMax(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Perform the softmax along the given axis.  input array stream or device to evaluate on Discussion This operation is a numerically stable version of:  See Also softMax(_:axes:stream:) softMax(_:axis:stream:)",
    "summary" : "Perform the softmax along the given axis.",
    "title" : "softMax(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ConvolveMode\/full"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "ConvolveMode.full"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/logSumExp(_:axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A log-sum-exp reduction over the given axes.  input array axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion The log-sum-exp reduction is a numerically stable version of:  See Also Reduction Functions logSumExp(_:axis:keepDims:stream:) logSumExp(_:keepDims:stream:) logSumExp(axes:keepDims:stream:)",
    "summary" : "A log-sum-exp reduction over the given axes.",
    "title" : "logSumExp(_:axes:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/asItem()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "asItem()"
  },
  {
    "headings" : [
      "Overview",
      "Basics of Compile",
      "Example Speedup",
      "Debugging",
      "Pure Functions",
      "Compiling Training Graphs"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/compilation"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "MLX has a compile(inputs:outputs:_:) function transformation which compiles computation graphs. Function compilation results in smaller graphs by merging common work and fusing certain operations. In many cases this can lead to big improvements in run-time and memory use. Overview Getting started with compile(inputs:outputs:_:) is simple, but there are some edge cases that are good to be aware of for more complex graphs and advanced usage. Basics of Compile Let’s start with a simple example:  The output of both the regular function and the compiled function is the same up to numerical precision. The first time you call a compiled function, MLX will build the compute graph, optimize it, and generate and compile code. This can be relatively slow. However, MLX will cache compiled functions, so calling a compiled function multiple times will not initiate a new compilation. This means you should typically compile functions that you plan to use more than once. There are some important cases to be aware of that can cause a function to be recompiled: Changing the shape or number of dimensions Changing the type of any of the inputs Changing the number of inputs to the function In certain cases only some of the compilation stack will be rerun (for example when changing the shapes) and in other cases the full compilation stack will be rerun (for example when changing the types). In general you should avoid compiling functions too frequently. Another idiom to watch out for is compiling functions which get created and destroyed frequently. This can happen, for example, when compiling a function inside a loop – better to hoist it to outside the loop. Example Speedup The function gelu() is a nonlinear activation function commonly used with Transformer-based models. The implementation involves several unary and binary element-wise operations:  If you use this function with small arrays, it will be overhead bound. If you use it with large arrays it will be memory bandwidth bound.  However, all of the operations in the gelu are fusible into a single kernel with compile(inputs:outputs:_:). This can speedup both cases considerably. Let’s compare the runtime of the regular function versus the compiled function. We’ll use the following timing helper which does a warm up and handles measures the execution:  Now make an array, and benchmark both functions:  On an M1 Max the times are 15.5 and 3.1 milliseconds. The compiled gelu is five times faster. As of the latest MLX, CPU functions are not fully compiled. Compiling CPU functions can still be helpful, but won’t typically result in as large a speedup as compiling operations that run on the GPU. Debugging When a compiled function is first called, it is traced with placeholder inputs. This means you can’t evaluate arrays (for example to print their contents) inside compiled functions.  For debugging, inspecting arrays can be helpful. One way to do that is to globally disable compilation using the compile(enable:) function or MLX_DISABLE_COMPILE environment variable. Pure Functions Compiled functions are intended to be pure; that is they should not have side effects. For example:  After calling the compiled version of f() the state variable will hold a placeholder array.  The placeholder does not have any data; it is only used to build the computation graph. Printing such an array results in a crash. You have two options to deal with this. The first option is to simply return state as an output:  In some cases returning updated state can be pretty inconvenient. Hence, compile(inputs:outputs:_:) has a parameter to capture implicit state:  Note that [MLXArray] implements the Updatable protocol, as does MLXArray, MLXRandom.globalState, Optimizer, and Module. This is particularly useful for compiling a function which includes an update to a container of arrays, as is commonly done when training the parameters of a Module. Compiled functions will also treat any inputs not in the parameter list as constants. For example:  The random number generation implicitly uses the global random seed, MLXRandom.seed(_:). Since this is not captured in the state, the value that is seen on the compilation run is used without seeing any updates or making any changes to state. To make this work as expected:  Compiling Training Graphs This section will step through how to use compile(inputs:outputs:_:) with a simple example of a common setup: training a model with Module using an Optimizer with state. We will show how to compile the full forward, backward, and update with compile(inputs:outputs:_:). Here is the basic scenario:  To start, here is the simple example without any compilation:  To compile the update we can put it all in a function and compile it with the appropriate input and output captures. Here’s the same example but compiled:  If you are using a module which performs random sampling such as Dropout, make sure you also include MLXRandom.globalState in the inputs: and outputs:.",
    "summary" : "MLX has a compile(inputs:outputs:_:) function transformation which compiles computation graphs. Function compilation results in smaller graphs by merging common work and fusing certain operations. In many cases this can lead to big improvements in run-time and memory use.",
    "title" : "Compilation"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/count"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.count. ",
    "summary" : "Inherited from Collection.count.",
    "title" : "count"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/prefix(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.prefix(_:). ",
    "summary" : "Inherited from Sequence.prefix(_:).",
    "title" : "prefix(_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Data type of the elements in the array.  Discussion ",
    "summary" : "Data type of the elements in the array.",
    "title" : "dtype"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/IntOrPair\/init(integerLiteral:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ExpressibleByIntegerLiteral.init(integerLiteral:). ",
    "summary" : "Inherited from ExpressibleByIntegerLiteral.init(integerLiteral:).",
    "title" : "init(integerLiteral:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/sorting"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Sorting and partitioning values and indices. Overview MLX has a number of methods that produce an array of indexes, including for sorting and partitioning:  There are other methods that produce a new sorted or partitioned array:  See related items in Indexes.",
    "summary" : "Sorting and partitioning values and indices.",
    "title" : "Sorting"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Array\/Updatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Updatable Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/pow(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise power operation.  Discussion Raise the elements of self to the powers in elements of other with Numpy Style Broadcasting. For example:  See Also Arithmetic Arithmetic **(_:_:) pow(_:_:stream:)",
    "summary" : "Element-wise power operation.",
    "title" : "pow(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/ones(_:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array of ones.  desired shape dtype of the values stream or device to evaluate on Discussion Example:  See Also Initialization ones(like:stream:) zeros(_:type:stream:)",
    "summary" : "Construct an array of ones.",
    "title" : "ones(_:type:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/IntOrPair\/init(arrayLiteral:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ExpressibleByArrayLiteral.init(arrayLiteral:). ",
    "summary" : "Inherited from ExpressibleByArrayLiteral.init(arrayLiteral:).",
    "title" : "init(arrayLiteral:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/.==(_:_:)-56m0a"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise equality.  Discussion Equality comparison on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators allClose(_:rtol:atol:equalNaN:stream:) arrayEqual(_:equalNAN:stream:) allClose(_:_:rtol:atol:equalNaN:stream:)",
    "summary" : "Element-wise equality.",
    "title" : ".==(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/multiply(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise multiplication.  the left hand side array the right hand side array stream or device to evaluate on Discussion Multiply two arrays with Numpy Style Broadcasting. For example:  See Also Arithmetic",
    "summary" : "Element-wise multiplication.",
    "title" : "multiply(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/dropFirst(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.dropFirst(_:). ",
    "summary" : "Inherited from Collection.dropFirst(_:).",
    "title" : "dropFirst(_:)"
  },
  {
    "headings" : [
      "Overview",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Stream"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A stream of evaluation attached to a particular device.  Overview Typically this is used via the stream:  parameter on a method with a StreamOrDevice:  Read more at Using Streams. See Also Using Streams StreamOrDevice",
    "summary" : "A stream of evaluation attached to a particular device.",
    "title" : "Stream"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/matmul(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Matrix multiplication.  Discussion Perform the (possibly batched) matrix multiplication of two arrays. This function supports broadcasting for arrays with more than two dimensions. If the first array is 1-D then a 1 is prepended to its shape to make it a matrix. Similarly if the second array is 1-D then a 1 is appended to its shape to make it a matrix. In either case the singleton dimension is removed from the result. A batched matrix multiplication is performed if the arrays have more than 2 dimensions.  The matrix dimensions for the matrix product are the last two dimensions of each input. All but the last two dimensions of each input are broadcast with one another using standard Numpy Style Broadcasting. For example:  See Also Arithmetic matmul(_:_:stream:)",
    "summary" : "Matrix multiplication.",
    "title" : "matmul(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/enumerated()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.enumerated(). ",
    "summary" : "Inherited from Sequence.enumerated().",
    "title" : "enumerated()"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/round(_:decimals:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Round to the given number of decimals.  Discussion Roughly equivalent to:  See Also Arithmetic floor(_:stream:) round(decimals:stream:)",
    "summary" : "Round to the given number of decimals.",
    "title" : "round(_:decimals:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/isEmpty"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.isEmpty. ",
    "summary" : "Inherited from Collection.isEmpty.",
    "title" : "isEmpty"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/HasDType\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the type’s DType ",
    "summary" : "Return the type’s DType",
    "title" : "dtype"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/argMax(keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Indices of the maximum value over the entire array.  if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Indexes argMax(axis:keepDims:stream:) argMin(axis:keepDims:stream:) argMax(_:axis:keepDims:stream:)",
    "summary" : "Indices of the maximum value over the entire array.",
    "title" : "argMax(keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/IntOrPair\/values"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "values"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/asArray(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the contents as a single contiguous 1d Swift.Array.  Discussion Note: because the number of dimensions is dynamic, this cannot produce a multi-dimensional array. See Also Conversion",
    "summary" : "Return the contents as a single contiguous 1d Swift.Array.",
    "title" : "asArray(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/mean(_:axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A mean reduction over the given axes.  input array axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions mean(_:axis:keepDims:stream:) mean(_:keepDims:stream:) mean(axes:keepDims:stream:)",
    "summary" : "A mean reduction over the given axes.",
    "title" : "mean(_:axes:keepDims:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/.==(_:_:)-79hbc"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise equality with a ScalarOrArray (scalar) argument.  See Also Arithmetic .==(_:_:)",
    "summary" : "Element-wise equality with a ScalarOrArray (scalar) argument.",
    "title" : ".==(_:_:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/subscript(_:stream:)-1a84u"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Multiple axis subscript.  Overview ",
    "summary" : "Multiple axis subscript.",
    "title" : "subscript(_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/transposed(_:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transpose the dimensions of the array.  Discussion This swaps the position of the first dimension with the given axis. See Also Shapes transposed(_:axes:stream:) transposed(_:stream:) transposed(axes:stream:)",
    "summary" : "Transpose the dimensions of the array.",
    "title" : "transposed(_:axis:stream:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/item()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the scalar value of the array.  Discussion It is a contract violation to call this on an array with more than one element or to read a type other than the dtype. ",
    "summary" : "Return the scalar value of the array.",
    "title" : "item()"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/log10(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise base-10 logarithm.  See Also Arithmetic log(_:stream:) log2(_:stream:) log1p(_:stream:) log10(stream:)",
    "summary" : "Element-wise base-10 logarithm.",
    "title" : "log10(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Device\/defaultDevice()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "defaultDevice()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ComplexModule\/Complex\/asMLXArray(dtype:)-9j3cr"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt16\/HasDType-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "HasDType Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:_:)-93flk"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an [Int] as a Dtype.int32.  Discussion  Note: if the value is out of bounds for an Int32 the precondition will fail.  If you need an Int (Int64) scalar, please use init(int64:_:). See Also Initialization init(int64:_:)",
    "summary" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an [Int] as a Dtype.int32.",
    "title" : "init(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/firstIndex(where:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.firstIndex(where:). ",
    "summary" : "Inherited from Collection.firstIndex(where:).",
    "title" : "firstIndex(where:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/reshaped(_:_:stream:)-96lgr"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Reshape an array while preserving the size.  Discussion  See Also Shapes reshaped(_:stream:) reshaped(_:_:stream:)",
    "summary" : "Reshape an array while preserving the size.",
    "title" : "reshaped(_:_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/joined(separator:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.joined(separator:). ",
    "summary" : "Inherited from Sequence.joined(separator:).",
    "title" : "joined(separator:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/cumprod(_:axis:reverse:inclusive:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return the cumulative product of the elements along the given axis.  Discussion  See Also Cumulative Operations cumprod(_:reverse:inclusive:stream:) cumprod(axis:reverse:inclusive:stream:)",
    "summary" : "Return the cumulative product of the elements along the given axis.",
    "title" : "cumprod(_:axis:reverse:inclusive:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/transposed(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transpose the dimensions of the array.  Discussion With no axes specified this will reverse the axes in the array. See Also Shapes transposed(_:axes:stream:) transposed(_:axis:stream:) transposed(axes:stream:)",
    "summary" : "Transpose the dimensions of the array.",
    "title" : "transposed(_:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/any(_:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An or reduction over the given axes.  input array if truekeep reduced axis as singleton dimension stream or device to evaluate on See Also Reduction Functions any(_:axes:keepDims:stream:) any(_:axis:keepDims:stream:) any(axes:keepDims:stream:)",
    "summary" : "An or reduction over the given axes.",
    "title" : "any(_:keepDims:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/**(_:_:)-4lp4b"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise power with a ScalarOrArray (scalar) argument.  See Also Arithmetic **(_:_:)",
    "summary" : "Element-wise power with a ScalarOrArray (scalar) argument.",
    "title" : "**(_:_:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/takeAlong(_:_:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Take values along an axis at the specified indices.  the left hand side array should be broadcastable to array excluding the axis dimension axis in the input to take the values from stream or device to evaluate on See Also Indexes takeAlong(_:_:stream:)",
    "summary" : "Take values along an axis at the specified indices.",
    "title" : "takeAlong(_:_:axis:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/.!(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Unary element-wise logical not.  Discussion For example:  See Also Logical Operators logicalNot(_:stream:)",
    "summary" : "Unary element-wise logical not.",
    "title" : ".!(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/first"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.first. ",
    "summary" : "Inherited from Collection.first.",
    "title" : "first"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/*(_:_:)-sw3w"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise multiplication with a ScalarOrArray (scalar) argument.  See Also Arithmetic *(_:_:)",
    "summary" : "Element-wise multiplication with a ScalarOrArray (scalar) argument.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Bool\/dtype"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from HasDType.dtype. ",
    "summary" : "Inherited from HasDType.dtype.",
    "title" : "dtype"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/ExpressibleByArrayLiteral-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ExpressibleByArrayLiteral Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DType\/float32"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "DType.float32"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/full(_:values:type:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array with the given value.  shape of the output array values to be bradcast into the array data type of the output array stream or device to evaluate on Discussion Constructs an array of size shape filled with vals. If vals is an :obj:array it must be Numpy Style Broadcasting to the given shape. Example:  See Also Initialization full(_:values:stream:) repeat(_:count:axis:stream:)",
    "summary" : "Construct an array with the given value.",
    "title" : "full(_:values:type:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/formatted(_:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Sequence.formatted(_:). ",
    "summary" : "Inherited from Sequence.formatted(_:).",
    "title" : "formatted(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int32\/asMLXArray(dtype:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/itemSize"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Number of bytes per element ",
    "summary" : "Number of bytes per element",
    "title" : "itemSize"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/_(_:_:)-516wd"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise remainder with a ScalarOrArray (scalar) argument.  See Also Arithmetic %(_:_:)",
    "summary" : "Element-wise remainder with a ScalarOrArray (scalar) argument.",
    "title" : "%(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/ones(_:dtype:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Construct an array of ones with a given DType  desired shape dtype of the values stream or device to evaluate on Discussion Example:  See Also Initialization ones(like:stream:) zeros(_:type:stream:)",
    "summary" : "Construct an array of ones with a given DType",
    "title" : "ones(_:dtype:stream:)"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/sorted(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a sorted copy of the flattened array.  input array stream or device to evaluate on See Also Sorting sorted(_:axis:stream:) argSort(_:axis:stream:)",
    "summary" : "Returns a sorted copy of the flattened array.",
    "title" : "sorted(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Int64\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/unflattened(_:)-7xuiv"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Convert a flattened list of key\/value tuples back into a NestedDictionary structure.  See Also flattened(prefix:) unflattened(_:)",
    "summary" : "Convert a flattened list of key\/value tuples back into a NestedDictionary structure.",
    "title" : "unflattened(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/IndentedDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Protocol for types that can provide an indented description, e.g. nested types. ",
    "summary" : "Protocol for types that can provide an indented description, e.g. nested types.",
    "title" : "IndentedDescription"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/shape"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Dimensions of the array.  Discussion ",
    "summary" : "Dimensions of the array.",
    "title" : "shape"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/top(_:k:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the k largest elements from the input along a given axis.  input array how many values axis to select over stream or device to evaluate on Discussion The elements will not necessarily be in sorted order. See Also Sorting top(_:k:stream:)",
    "summary" : "Returns the k largest elements from the input along a given axis.",
    "title" : "top(_:k:axis:stream:)"
  },
  {
    "headings" : [
      "Overview",
      "Xcode",
      "SwiftPM",
      "Command Line Tools"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/install"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "How to install and use. Overview MLX is meant to be built and run from Xcode or SwiftPM. Xcode In Xcode you can add https:\/\/github.com\/ml-explore\/mlx-swift as a package dependency and link MLX, MLXNN and MLXRandom as needed. SwiftPM To use MLX with SwiftPm you can add this to your Package.swift:  and add the libraries (as needed) as dependencies:  Note that SwiftPM cannot build the metal shaders so the ultimate build has to be done via Xcode or xcodebuild. Command Line Tools See Troubleshooting (Runnging From Command Line) for information about running command line tools from the shell.",
    "summary" : "How to install and use.",
    "title" : "Installation"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedDictionary\/prefix(while:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Collection.prefix(while:). ",
    "summary" : "Inherited from Collection.prefix(while:).",
    "title" : "prefix(while:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/stopGradient(_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Stop gradients from being computed.  input array stream or device to evaluate on Discussion The operation is the identity but it prevents gradients from flowing through the array.",
    "summary" : "Stop gradients from being computed.",
    "title" : "stopGradient(_:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/Bool"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "Bool"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ConvolveMode\/valid"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "ConvolveMode.valid"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/dropFirst(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Sequence.dropFirst(_:). ",
    "summary" : "Inherited from Sequence.dropFirst(_:).",
    "title" : "dropFirst(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ScalarOrArray"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Protocol for promoting a value (e.g. a scalar) to an MLXArray. ",
    "summary" : "Protocol for promoting a value (e.g. a scalar) to an MLXArray.",
    "title" : "ScalarOrArray"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:)-86r8u"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an Int32.  Discussion  See Also Initialization",
    "summary" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an Int32.",
    "title" : "init(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/lessEqual(_:_:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise less than or equal.  the left hand side array the right hand side array stream or device to evaluate on Discussion Less than or equal on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators",
    "summary" : "Element-wise less than or equal.",
    "title" : "lessEqual(_:_:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/repeat(_:count:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Repeat an array along a specified axis.  array to repeat number of times to repeat axis to repeat along stream or device to evaluate on Discussion Example:  See Also Initialization repeat(_:count:stream:) full(_:values:stream:)",
    "summary" : "Repeat an array along a specified axis.",
    "title" : "repeat(_:count:axis:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/Swift\/UInt8\/ScalarOrArray-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ScalarOrArray Implementations"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/._(_:_:)-54ivt"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise less than with a ScalarOrArray (scalar) argument.  See Also Arithmetic .<(_:_:)",
    "summary" : "Element-wise less than with a ScalarOrArray (scalar) argument.",
    "title" : ".<(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(int64:_:)-74tu0"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an [Int] as a Dtype.int64.  Discussion  Note init(int64:_:) (producing an int32 scalar is preferred). See Also Initialization",
    "summary" : "Initalizer allowing creation of scalar (0-dimension) MLXArray from an [Int] as a Dtype.int64.",
    "title" : "init(int64:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/ScalarOrArray\/asMLXArray(dtype:)-14eqb"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ScalarOrArray.asMLXArray(dtype:). ",
    "summary" : "Inherited from ScalarOrArray.asMLXArray(dtype:).",
    "title" : "asMLXArray(dtype:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/dim(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Read a dimension of the array.  Discussion ",
    "summary" : "Read a dimension of the array.",
    "title" : "dim(_:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/reduction"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Reduction or aggregation functions. Overview MLX has a number of functions to reduce or aggregate data in MLXArray. These functions typically work over one or more axes, though there are overloads where the axis can be omitted and the work occurs on the entire array. For example:  See also Logical Operators and Cumulative Operations",
    "summary" : "Reduction or aggregation functions.",
    "title" : "Reduction Functions"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/any(axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An or reduction over the given axes.  axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions any(axis:keepDims:stream:) any(keepDims:stream:) any(_:axes:keepDims:stream:)",
    "summary" : "An or reduction over the given axes.",
    "title" : "any(axes:keepDims:stream:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/NestedItem\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/expandedDimensions(_:axes:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Add a size one dimension at the given axis.  input array indexes of the inserted dimensions stream or device to evaluate on See Also Shapes expandedDimensions(_:axis:stream:)",
    "summary" : "Add a size one dimension at the given axis.",
    "title" : "expandedDimensions(_:axes:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/init(_:_:type:)-f9u5"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Initalizer allowing creation of MLXArray from a UnsafeRawBufferPointer filled with bytes of HasDType values with an optional shape.  Discussion  See Also Initialization",
    "summary" : "Initalizer allowing creation of MLXArray from a UnsafeRawBufferPointer filled with bytes of HasDType values with an optional shape.",
    "title" : "init(_:_:type:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/DeviceType\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/take(_:axis:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Take elements along an axis.  Discussion The elements are taken from indices along the specified axis.  See Also take(_:stream:) take(_:_:axis:stream:)",
    "summary" : "Take elements along an axis.",
    "title" : "take(_:axis:stream:)"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/min(axes:keepDims:stream:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A min reduction over the given axes.  axes to reduce over if truekeep reduced axis as singleton dimension stream or device to evaluate on Discussion  See Also Reduction Functions min(axis:keepDims:stream:) min(keepDims:stream:) min(_:axes:keepDims:stream:)",
    "summary" : "A min reduction over the given axes.",
    "title" : "min(axes:keepDims:stream:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/count"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Number of elements in the 0th dimension.  Discussion For example, these would be equivalent: ",
    "summary" : "Number of elements in the 0th dimension.",
    "title" : "count"
  },
  {
    "headings" : [
      "Discussion",
      "See Also"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/mlx.swift.mlx\/documentation\/MLX\/MLXArray\/._(_:_:)-9rzup"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Element-wise less than.  Discussion Less than on two arrays with Numpy Style Broadcasting. For example:  See Also Logical Operators less(_:_:stream:)",
    "summary" : "Element-wise less than.",
    "title" : ".<(_:_:)"
  }
]