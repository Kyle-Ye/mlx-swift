{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "MLX",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/mlx\/install",
            "title" : "Installation",
            "type" : "article"
          },
          {
            "path" : "\/documentation\/mlx\/troubleshooting",
            "title" : "Troubleshooting",
            "type" : "article"
          },
          {
            "path" : "\/documentation\/mlx\/examples",
            "title" : "MLX Swift Examples",
            "type" : "sampleCode"
          },
          {
            "path" : "\/documentation\/mlx\/converting-python",
            "title" : "Converting From Python",
            "type" : "article"
          },
          {
            "path" : "\/documentation\/mlx\/broadcasting",
            "title" : "Numpy Style Broadcasting",
            "type" : "article"
          },
          {
            "path" : "\/documentation\/mlx\/lazy-evaluation",
            "title" : "Lazy Evaluation",
            "type" : "article"
          },
          {
            "path" : "\/documentation\/mlx\/unified-memory",
            "title" : "Unified Memory",
            "type" : "article"
          },
          {
            "children" : [
              {
                "title" : "Functions",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/compile(inputs:outputs:_:)-96gqs",
                "title" : "func compile(inputs: [Updatable], outputs: [Updatable], ([MLXArray]) -> [MLXArray]) -> ([MLXArray]) -> [MLXArray]",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/compile(inputs:outputs:_:)-7qwto",
                "title" : "func compile(inputs: [Updatable], outputs: [Updatable], (MLXArray) -> MLXArray) -> (MLXArray) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/compile(inputs:outputs:_:)-5mp7m",
                "title" : "func compile(inputs: [Updatable], outputs: [Updatable], (MLXArray, MLXArray) -> MLXArray) -> (MLXArray, MLXArray) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/compile(enable:)",
                "title" : "func compile(enable: Bool)",
                "type" : "func"
              }
            ],
            "path" : "\/documentation\/mlx\/compilation",
            "title" : "Compilation",
            "type" : "symbol"
          },
          {
            "path" : "\/documentation\/mlx\/using-streams",
            "title" : "Using Streams",
            "type" : "article"
          },
          {
            "title" : "MLXArray",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Creation",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "MLXArray Literal Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(arrayliteral:)",
                    "title" : "convenience init(arrayLiteral: Int32...)",
                    "type" : "init"
                  },
                  {
                    "title" : "MLXArray Scalar Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:)-9iiz7",
                    "title" : "convenience init(Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:)-6zp01",
                    "title" : "convenience init(Float)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:)-86r8u",
                    "title" : "convenience init(Int32)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:)-10m",
                    "title" : "convenience init<T>(T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:)-96nyv",
                    "title" : "init(mlx_array)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:dtype:)",
                    "title" : "convenience init<T>(T, dtype: DType)",
                    "type" : "init"
                  },
                  {
                    "title" : "MLXArray Int Overrides",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:)-6nnka",
                    "title" : "convenience init(Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:_:)-93flk",
                    "title" : "convenience init([Int], [Int]?)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(int64:)",
                    "title" : "convenience init(int64: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(int64:_:)-7bgj2",
                    "title" : "convenience init(int64: [Int], [Int]?)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(int64:_:)-74tu0",
                    "title" : "convenience init(int64: Sequence<Int>, [Int]?)",
                    "type" : "init"
                  },
                  {
                    "title" : "MLXArray Array Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:_:)-4n0or",
                    "title" : "convenience init<S>(S, [Int]?)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:_:)-dq8h",
                    "title" : "convenience init<T>(UnsafeBufferPointer<T>, [Int]?)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:_:)-89jw1",
                    "title" : "convenience init<T>([T], [Int]?)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(converting:_:)",
                    "title" : "convenience init(converting: [Double], [Int]?)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:_:type:)-5esf9",
                    "title" : "convenience init<T>(Data, [Int]?, type: T.Type)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:_:type:)-f9u5",
                    "title" : "convenience init<T>(UnsafeRawBufferPointer, [Int]?, type: T.Type)",
                    "type" : "init"
                  },
                  {
                    "title" : "MLXArray Complex Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(real:imaginary:)",
                    "title" : "convenience init(real: Float, imaginary: Float)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(_:)-6iii5",
                    "title" : "convenience init(Complex<Float>)",
                    "type" : "init"
                  },
                  {
                    "title" : "MLXArray Factory Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/zeros(_:type:stream:)",
                    "title" : "static func zeros<T>([Int], type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/zeros(like:stream:)",
                    "title" : "static func zeros(like: MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/zeros(_:dtype:stream:)",
                    "title" : "static func zeros([Int], dtype: DType, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/ones(_:type:stream:)",
                    "title" : "static func ones<T>([Int], type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/ones(like:stream:)",
                    "title" : "static func ones(like: MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/ones(_:dtype:stream:)",
                    "title" : "static func ones([Int], dtype: DType, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/eye(_:m:k:type:stream:)",
                    "title" : "static func eye<T>(Int, m: Int?, k: Int, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/full(_:values:type:stream:)",
                    "title" : "static func full<T>([Int], values: MLXArray, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/full(_:values:stream:)",
                    "title" : "static func full([Int], values: MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/identity(_:type:stream:)",
                    "title" : "static func identity<T>(Int, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/linspace(_:_:count:stream:)-92x6l",
                    "title" : "static func linspace<T>(T, T, count: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/linspace(_:_:count:stream:)-7m7eg",
                    "title" : "static func linspace<T>(T, T, count: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/repeat(_:count:axis:stream:)",
                    "title" : "static func `repeat`(MLXArray, count: Int, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/repeat(_:count:stream:)",
                    "title" : "static func `repeat`(MLXArray, count: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/tri(_:m:k:type:stream:)",
                    "title" : "static func tri<T>(Int, m: Int?, k: Int, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "title" : "MLXArray Factory Free Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/zeros(_:type:stream:)",
                    "title" : "func zeros<T>([Int], type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/zeros(like:stream:)",
                    "title" : "func zeros(like: MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/ones(_:type:stream:)",
                    "title" : "func ones<T>([Int], type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/ones(like:stream:)",
                    "title" : "func ones(like: MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/eye(_:m:k:type:stream:)",
                    "title" : "func eye<T>(Int, m: Int?, k: Int, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/full(_:values:type:stream:)",
                    "title" : "func full<T>([Int], values: MLXArray, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/full(_:values:stream:)",
                    "title" : "func full([Int], values: MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/identity(_:type:stream:)",
                    "title" : "func identity<T>(Int, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/linspace(_:_:count:stream:)-7vj0o",
                    "title" : "func linspace<T>(T, T, count: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/linspace(_:_:count:stream:)-6w959",
                    "title" : "func linspace<T>(T, T, count: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/repeat(_:count:axis:stream:)",
                    "title" : "func `repeat`(MLXArray, count: Int, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/repeat(_:count:stream:)",
                    "title" : "func `repeat`(MLXArray, count: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/tri(_:m:k:type:stream:)",
                    "title" : "func tri<T>(Int, m: Int?, k: Int, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  }
                ],
                "path" : "\/documentation\/mlx\/initialization",
                "title" : "Initialization",
                "type" : "symbol"
              },
              {
                "title" : "Arithmetic Operators and Functions",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "MLXArray Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/+(_:_:)-1rv98",
                    "title" : "static func + (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/+(_:_:)-2vili",
                    "title" : "static func + <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/+(_:_:)-1jn5i",
                    "title" : "static func + <T>(T, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/-(_:)",
                    "title" : "static func - (MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/*(_:_:)-1z2ck",
                    "title" : "static func * (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/*(_:_:)-sw3w",
                    "title" : "static func * <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/*(_:_:)-7441r",
                    "title" : "static func * <T>(T, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/**(_:_:)-8xxt3",
                    "title" : "static func ** (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/**(_:_:)-6ve5u",
                    "title" : "static func ** <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/**(_:_:)-4lp4b",
                    "title" : "static func ** <T>(T, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/_(_:_:)-3ubwd",
                    "title" : "static func % (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/_(_:_:)-516wd",
                    "title" : "static func % <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/_(_:_:)-8az7l",
                    "title" : "static func % <T>(T, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.!(_:)",
                    "title" : "static func .! (MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.==(_:_:)-56m0a",
                    "title" : "static func .== (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.==(_:_:)-79hbc",
                    "title" : "static func .== <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.!=(_:_:)-mbw0",
                    "title" : "static func .!= (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.!=(_:_:)-gkdj",
                    "title" : "static func .!= <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._(_:_:)-9rzup",
                    "title" : "static func .< (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._(_:_:)-54ivt",
                    "title" : "static func .< <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._=(_:_:)-2a0s9",
                    "title" : "static func .<= (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._=(_:_:)-6vb92",
                    "title" : "static func .<= <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._(_:_:)-fwi1",
                    "title" : "static func .> (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._(_:_:)-2v86b",
                    "title" : "static func .> <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._=(_:_:)-2gqml",
                    "title" : "static func .>= (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._=(_:_:)-6zxj9",
                    "title" : "static func .>= <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.&&(_:_:)",
                    "title" : "static func .&& (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.__(_:_:)",
                    "title" : "static func .|| (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "title" : "MLXArray Element-wise Arithmetic Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/abs(stream:)",
                    "title" : "func abs(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/cos(stream:)",
                    "title" : "func cos(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/exp(stream:)",
                    "title" : "func exp(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/floor(stream:)",
                    "title" : "func floor(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/floordivide(_:stream:)",
                    "title" : "func floorDivide<T>(T, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/log(stream:)",
                    "title" : "func log(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/log2(stream:)",
                    "title" : "func log2(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/log10(stream:)",
                    "title" : "func log10(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/log1p(stream:)",
                    "title" : "func log1p(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/pow(_:stream:)",
                    "title" : "func pow<T>(T, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/reciprocal(stream:)",
                    "title" : "func reciprocal(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/rsqrt(stream:)",
                    "title" : "func rsqrt(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/round(decimals:stream:)",
                    "title" : "func round(decimals: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/sin(stream:)",
                    "title" : "func sin(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/sqrt(stream:)",
                    "title" : "func sqrt(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/square(stream:)",
                    "title" : "func square(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "title" : "Element-wise Arithmetic Free Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/abs(_:stream:)",
                    "title" : "func abs(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/acos(_:stream:)",
                    "title" : "func acos(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/acosh(_:stream:)",
                    "title" : "func acosh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/add(_:_:stream:)",
                    "title" : "func add<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/asin(_:stream:)",
                    "title" : "func asin(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/asinh(_:stream:)",
                    "title" : "func asinh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/atan(_:stream:)",
                    "title" : "func atan(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/atanh(_:stream:)",
                    "title" : "func atanh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/ceil(_:stream:)",
                    "title" : "func ceil(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/clip(_:min:max:stream:)",
                    "title" : "func clip(MLXArray, min: MLXArray, max: MLXArray?, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/cos(_:stream:)",
                    "title" : "func cos(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/cosh(_:stream:)",
                    "title" : "func cosh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/divide(_:_:stream:)",
                    "title" : "func divide<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/erf(_:stream:)",
                    "title" : "func erf(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/erfinverse(_:stream:)",
                    "title" : "func erfInverse(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/exp(_:stream:)",
                    "title" : "func exp(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/floor(_:stream:)",
                    "title" : "func floor(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/floordivide(_:_:stream:)",
                    "title" : "func floorDivide<T>(MLXArray, T, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/log(_:stream:)",
                    "title" : "func log(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/log10(_:stream:)",
                    "title" : "func log10(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/log1p(_:stream:)",
                    "title" : "func log1p(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/log2(_:stream:)",
                    "title" : "func log2(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/logaddexp(_:_:stream:)",
                    "title" : "func logAddExp<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/logicalnot(_:stream:)",
                    "title" : "func logicalNot(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/matmul(_:_:stream:)",
                    "title" : "func matmul(MLXArray, MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/maximum(_:_:stream:)",
                    "title" : "func maximum<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/minimum(_:_:stream:)",
                    "title" : "func minimum<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/multiply(_:_:stream:)",
                    "title" : "func multiply<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/negative(_:stream:)",
                    "title" : "func negative(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/notequal(_:_:stream:)",
                    "title" : "func notEqual<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/pow(_:_:stream:)-7pe7j",
                    "title" : "func pow<T>(MLXArray, T, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/pow(_:_:stream:)-49xi0",
                    "title" : "func pow<T>(T, MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/pow(_:_:stream:)-8ie9c",
                    "title" : "func pow(MLXArray, MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/reciprocal(_:stream:)",
                    "title" : "func reciprocal(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/remainder(_:_:stream:)",
                    "title" : "func remainder<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/round(_:decimals:stream:)",
                    "title" : "func round(MLXArray, decimals: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/rsqrt(_:stream:)",
                    "title" : "func rsqrt(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/sigmoid(_:stream:)",
                    "title" : "func sigmoid(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/sign(_:stream:)",
                    "title" : "func sign(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/sin(_:stream:)",
                    "title" : "func sin(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/sinh(_:stream:)",
                    "title" : "func sinh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/softmax(_:axes:stream:)",
                    "title" : "func softMax(MLXArray, axes: [Int], stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/sqrt(_:stream:)",
                    "title" : "func sqrt(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/square(_:stream:)",
                    "title" : "func square(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/subtract(_:_:stream:)",
                    "title" : "func subtract<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/tan(_:stream:)",
                    "title" : "func tan(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/tanh(_:stream:)",
                    "title" : "func tanh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/which(_:_:_:stream:)",
                    "title" : "func which<A, B>(MLXArray, A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "title" : "Matrix Multiply",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/matmul(_:stream:)",
                    "title" : "func matmul(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/matmul(_:_:stream:)",
                    "title" : "func matmul(MLXArray, MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  }
                ],
                "path" : "\/documentation\/mlx\/arithmetic",
                "title" : "Arithmetic",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Convolution Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/conv1d(_:_:stride:padding:dilation:groups:stream:)",
                    "title" : "func conv1d(MLXArray, MLXArray, stride: Int, padding: Int, dilation: Int, groups: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/conv2d(_:_:stride:padding:dilation:groups:stream:)",
                    "title" : "func conv2d(MLXArray, MLXArray, stride: IntOrPair, padding: IntOrPair, dilation: IntOrPair, groups: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/convolve(_:_:mode:stream:)",
                    "title" : "func convolve<A, B>(A, B, mode: ConvolveMode, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  }
                ],
                "path" : "\/documentation\/mlx\/convolution",
                "title" : "Convolution",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "MLXArray Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/cummax(axis:reverse:inclusive:stream:)",
                    "title" : "func cummax(axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/cummax(reverse:inclusive:stream:)",
                    "title" : "func cummax(reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/cummin(axis:reverse:inclusive:stream:)",
                    "title" : "func cummin(axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/cummin(reverse:inclusive:stream:)",
                    "title" : "func cummin(reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/cumprod(axis:reverse:inclusive:stream:)",
                    "title" : "func cumprod(axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/cumprod(reverse:inclusive:stream:)",
                    "title" : "func cumprod(reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/cumsum(axis:reverse:inclusive:stream:)",
                    "title" : "func cumsum(axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/cumsum(reverse:inclusive:stream:)",
                    "title" : "func cumsum(reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "title" : "Free Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/cummax(_:axis:reverse:inclusive:stream:)",
                    "title" : "func cummax(MLXArray, axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/cummax(_:reverse:inclusive:stream:)",
                    "title" : "func cummax(MLXArray, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/cummin(_:axis:reverse:inclusive:stream:)",
                    "title" : "func cummin(MLXArray, axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/cummin(_:reverse:inclusive:stream:)",
                    "title" : "func cummin(MLXArray, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/cumprod(_:axis:reverse:inclusive:stream:)",
                    "title" : "func cumprod(MLXArray, axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/cumprod(_:reverse:inclusive:stream:)",
                    "title" : "func cumprod(MLXArray, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/cumsum(_:axis:reverse:inclusive:stream:)",
                    "title" : "func cumsum(MLXArray, axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/cumsum(_:reverse:inclusive:stream:)",
                    "title" : "func cumsum(MLXArray, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  }
                ],
                "path" : "\/documentation\/mlx\/cumulative",
                "title" : "Cumulative Operations",
                "type" : "symbol"
              },
              {
                "title" : "Indexing",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Index Producing Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/argmax(keepdims:stream:)",
                    "title" : "func argMax(keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/argmax(axis:keepdims:stream:)",
                    "title" : "func argMax(axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/argmin(keepdims:stream:)",
                    "title" : "func argMin(keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/argmin(axis:keepdims:stream:)",
                    "title" : "func argMin(axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/argmax(_:keepdims:stream:)",
                    "title" : "func argMax(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/argmax(_:axis:keepdims:stream:)",
                    "title" : "func argMax(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/argmin(_:keepdims:stream:)",
                    "title" : "func argMin(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/argmin(_:axis:keepdims:stream:)",
                    "title" : "func argMin(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/argpartition(_:kth:stream:)",
                    "title" : "func argPartition(MLXArray, kth: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/argpartition(_:kth:axis:stream:)",
                    "title" : "func argPartition(MLXArray, kth: Int, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/argsort(_:stream:)",
                    "title" : "func argSort(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/argsort(_:axis:stream:)",
                    "title" : "func argSort(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "title" : "Index Consuming Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/subscript(_:stream:)-82jwt",
                    "title" : "subscript(MLXArray..., stream _: StreamOrDevice) -> MLXArray",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/take(_:axis:stream:)",
                    "title" : "func take(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/takealong(_:_:axis:stream:)",
                    "title" : "func takeAlong(MLXArray, MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  }
                ],
                "path" : "\/documentation\/mlx\/indexes",
                "title" : "Indexes",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Subscript Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/subscript(_:stream:)-od5g",
                    "title" : "subscript(Int, stream _: StreamOrDevice) -> MLXArray",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/subscript(_:stream:)-7n5nw",
                    "title" : "subscript(Int..., stream _: StreamOrDevice) -> MLXArray",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/subscript(_:stream:)-82jwt",
                    "title" : "subscript(MLXArray..., stream _: StreamOrDevice) -> MLXArray",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/subscript(_:stream:)-1a84u",
                    "title" : "subscript([Int], stream _: StreamOrDevice) -> MLXArray",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/subscript(_:stream:)-8a2s7",
                    "title" : "subscript([RangeExpression<Int>], stream _: StreamOrDevice) -> MLXArray",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/subscript(_:stream:)-4z56f",
                    "title" : "subscript(RangeExpression<Int>..., stream _: StreamOrDevice) -> MLXArray",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/subscript(_:axis:stream:)-1jy5n",
                    "title" : "subscript(Int, axis _: Int, stream _: StreamOrDevice) -> MLXArray",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/subscript(_:axis:stream:)-79psf",
                    "title" : "subscript(RangeExpression<Int>, axis _: Int, stream _: StreamOrDevice) -> MLXArray",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/subscript(from:to:stride:axis:stream:)",
                    "title" : "subscript(from _: Int?, to _: Int?, stride _: Int, axis _: Int, stream _: StreamOrDevice) -> MLXArray",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Related Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/take(_:axis:stream:)",
                    "title" : "func take(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/takealong(_:_:axis:stream:)",
                    "title" : "func takeAlong(MLXArray, MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  }
                ],
                "path" : "\/documentation\/mlx\/indexing",
                "title" : "Indexing",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Index Producing Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/argsort(_:axis:stream:)",
                    "title" : "func argSort(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/argpartition(_:kth:axis:stream:)",
                    "title" : "func argPartition(MLXArray, kth: Int, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "title" : "Sorting Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/sorted(_:axis:stream:)",
                    "title" : "func sorted(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/partitioned(_:kth:axis:stream:)",
                    "title" : "func partitioned(MLXArray, kth: Int, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  }
                ],
                "path" : "\/documentation\/mlx\/sorting",
                "title" : "Sorting",
                "type" : "symbol"
              },
              {
                "title" : "Logical Operations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "MLXArray Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.!(_:)",
                    "title" : "static func .! (MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.==(_:_:)-56m0a",
                    "title" : "static func .== (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.==(_:_:)-79hbc",
                    "title" : "static func .== <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.!=(_:_:)-mbw0",
                    "title" : "static func .!= (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.!=(_:_:)-gkdj",
                    "title" : "static func .!= <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._(_:_:)-9rzup",
                    "title" : "static func .< (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._(_:_:)-54ivt",
                    "title" : "static func .< <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._=(_:_:)-2a0s9",
                    "title" : "static func .<= (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._=(_:_:)-6vb92",
                    "title" : "static func .<= <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._(_:_:)-fwi1",
                    "title" : "static func .> (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._(_:_:)-2v86b",
                    "title" : "static func .> <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._=(_:_:)-2gqml",
                    "title" : "static func .>= (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'._=(_:_:)-6zxj9",
                    "title" : "static func .>= <T>(MLXArray, T) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.&&(_:_:)",
                    "title" : "static func .&& (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/'.__(_:_:)",
                    "title" : "static func .|| (MLXArray, MLXArray) -> MLXArray",
                    "type" : "op"
                  },
                  {
                    "title" : "MLXArray Logical Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/all(axes:keepdims:stream:)",
                    "title" : "func all(axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/any(axes:keepdims:stream:)",
                    "title" : "func any(axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/allclose(_:rtol:atol:equalnan:stream:)",
                    "title" : "func allClose<T>(T, rtol: Double, atol: Double, equalNaN: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/arrayequal(_:equalnan:stream:)",
                    "title" : "func arrayEqual<T>(T, equalNAN: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "title" : "Logical Free Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/all(_:axes:keepdims:stream:)",
                    "title" : "func all(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/allclose(_:_:rtol:atol:equalnan:stream:)",
                    "title" : "func allClose<T>(MLXArray, T, rtol: Double, atol: Double, equalNaN: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/any(_:axes:keepdims:stream:)",
                    "title" : "func any(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/arrayequal(_:_:equalnan:stream:)",
                    "title" : "func arrayEqual<T>(MLXArray, T, equalNAN: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/equal(_:_:stream:)",
                    "title" : "func equal<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/greater(_:_:stream:)",
                    "title" : "func greater<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/greaterequal(_:_:stream:)",
                    "title" : "func greaterEqual<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/less(_:_:stream:)",
                    "title" : "func less<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/lessequal(_:_:stream:)",
                    "title" : "func lessEqual<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/logicalnot(_:stream:)",
                    "title" : "func logicalNot(MLXArray, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/notequal(_:_:stream:)",
                    "title" : "func notEqual<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/where(_:_:_:stream:)",
                    "title" : "func `where`<A, B>(MLXArray, A, B, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  }
                ],
                "path" : "\/documentation\/mlx\/logical",
                "title" : "Logical Operators",
                "type" : "symbol"
              },
              {
                "title" : "Shapes",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Reading Shapes",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/shape",
                    "title" : "var shape: [Int]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/dim(_:)",
                    "title" : "func dim(Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "MLXArray Shape Methods (Same Size)",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/expandeddimensions(axis:stream:)",
                    "title" : "func expandedDimensions(axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/expandeddimensions(axes:stream:)",
                    "title" : "func expandedDimensions(axes: [Int], stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/flattened(start:end:stream:)",
                    "title" : "func flattened(start: Int, end: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/reshaped(_:stream:)-19x5z",
                    "title" : "func reshaped([Int], stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/reshaped(_:stream:)-67a89",
                    "title" : "func reshaped(Int..., stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/squeezed(stream:)",
                    "title" : "func squeezed(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/squeezed(axis:stream:)",
                    "title" : "func squeezed(axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/squeezed(axes:stream:)",
                    "title" : "func squeezed(axes: [Int], stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/expandeddimensions(_:axis:stream:)",
                    "title" : "func expandedDimensions(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/expandeddimensions(_:axes:stream:)",
                    "title" : "func expandedDimensions(MLXArray, axes: [Int], stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/asstrided(_:_:strides:offset:stream:)",
                    "title" : "func asStrided(MLXArray, [Int]?, strides: [Int]?, offset: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/flattened(_:start:end:stream:)",
                    "title" : "func flattened(MLXArray, start: Int, end: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/reshaped(_:_:stream:)-5x3y0",
                    "title" : "func reshaped(MLXArray, [Int], stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/squeezed(_:axes:stream:)",
                    "title" : "func squeezed(MLXArray, axes: [Int], stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "title" : "MLXArray Shape Methods (Change Size)",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/movedaxis(source:destination:stream:)",
                    "title" : "func movedAxis(source: Int, destination: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/split(parts:axis:stream:)",
                    "title" : "func split(parts: Int, axis: Int, stream: StreamOrDevice) -> [MLXArray]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/split(indices:axis:stream:)",
                    "title" : "func split(indices: [Int], axis: Int, stream: StreamOrDevice) -> [MLXArray]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/swappedaxes(_:_:stream:)",
                    "title" : "func swappedAxes(Int, Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/transposed(stream:)",
                    "title" : "func transposed(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/transposed(axis:stream:)",
                    "title" : "func transposed(axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/transposed(axes:stream:)",
                    "title" : "func transposed(axes: [Int], stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/transposed(_:stream:)",
                    "title" : "func transposed(Int..., stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/t",
                    "title" : "var T: MLXArray",
                    "type" : "property"
                  },
                  {
                    "title" : "Free Functions To Manipulate Shapes",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/asstrided(_:_:strides:offset:stream:)",
                    "title" : "func asStrided(MLXArray, [Int]?, strides: [Int]?, offset: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/broadcast(_:to:stream:)",
                    "title" : "func broadcast(MLXArray, to: [Int], stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/concatenated(_:axis:stream:)",
                    "title" : "func concatenated([MLXArray], axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/expandeddimensions(_:axes:stream:)",
                    "title" : "func expandedDimensions(MLXArray, axes: [Int], stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/movedaxis(_:source:destination:stream:)",
                    "title" : "func movedAxis(MLXArray, source: Int, destination: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/padded(_:width:value:stream:)",
                    "title" : "func padded(MLXArray, width: IntOrPair, value: MLXArray?, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/padded(_:widths:value:stream:)",
                    "title" : "func padded(MLXArray, widths: [IntOrPair], value: MLXArray?, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/split(_:indices:axis:stream:)",
                    "title" : "func split(MLXArray, indices: [Int], axis: Int, stream: StreamOrDevice) -> [MLXArray]",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/split(_:parts:axis:stream:)",
                    "title" : "func split(MLXArray, parts: Int, axis: Int, stream: StreamOrDevice) -> [MLXArray]",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/stacked(_:axis:stream:)",
                    "title" : "func stacked([MLXArray], axis: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/swappedaxes(_:_:_:stream:)",
                    "title" : "func swappedAxes(MLXArray, Int, Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/transposed(_:axes:stream:)",
                    "title" : "func transposed(MLXArray, axes: [Int], stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  }
                ],
                "path" : "\/documentation\/mlx\/shapes",
                "title" : "Shapes",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "MLXArray Logical Reduction Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/all(keepdims:stream:)",
                    "title" : "func all(keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/all(axis:keepdims:stream:)",
                    "title" : "func all(axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/all(axes:keepdims:stream:)",
                    "title" : "func all(axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/any(keepdims:stream:)",
                    "title" : "func any(keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/any(axis:keepdims:stream:)",
                    "title" : "func any(axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/any(axes:keepdims:stream:)",
                    "title" : "func any(axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "title" : "MLXArray Aggregating Reduction Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/logsumexp(keepdims:stream:)",
                    "title" : "func logSumExp(keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/logsumexp(axis:keepdims:stream:)",
                    "title" : "func logSumExp(axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/logsumexp(axes:keepdims:stream:)",
                    "title" : "func logSumExp(axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/product(keepdims:stream:)",
                    "title" : "func product(keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/product(axis:keepdims:stream:)",
                    "title" : "func product(axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/product(axes:keepdims:stream:)",
                    "title" : "func product(axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/max(keepdims:stream:)",
                    "title" : "func max(keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/max(axis:keepdims:stream:)",
                    "title" : "func max(axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/max(axes:keepdims:stream:)",
                    "title" : "func max(axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/mean(keepdims:stream:)",
                    "title" : "func mean(keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/mean(axis:keepdims:stream:)",
                    "title" : "func mean(axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/mean(axes:keepdims:stream:)",
                    "title" : "func mean(axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/min(keepdims:stream:)",
                    "title" : "func min(keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/min(axis:keepdims:stream:)",
                    "title" : "func min(axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/min(axes:keepdims:stream:)",
                    "title" : "func min(axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/sum(keepdims:stream:)",
                    "title" : "func sum(keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/sum(axis:keepdims:stream:)",
                    "title" : "func sum(axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/sum(axes:keepdims:stream:)",
                    "title" : "func sum(axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/variance(keepdims:ddof:stream:)",
                    "title" : "func variance(keepDims: Bool, ddof: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/variance(axis:keepdims:ddof:stream:)",
                    "title" : "func variance(axis: Int, keepDims: Bool, ddof: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/variance(axes:keepdims:ddof:stream:)",
                    "title" : "func variance(axes: [Int], keepDims: Bool, ddof: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "title" : "Logical Reduction Free Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/all(_:keepdims:stream:)",
                    "title" : "func all(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/all(_:axis:keepdims:stream:)",
                    "title" : "func all(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/all(_:axes:keepdims:stream:)",
                    "title" : "func all(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/any(_:keepdims:stream:)",
                    "title" : "func any(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/any(_:axis:keepdims:stream:)",
                    "title" : "func any(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/any(_:axes:keepdims:stream:)",
                    "title" : "func any(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "title" : "Aggregating Reduction Free Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/logsumexp(_:keepdims:stream:)",
                    "title" : "func logSumExp(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/logsumexp(_:axis:keepdims:stream:)",
                    "title" : "func logSumExp(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/logsumexp(_:axes:keepdims:stream:)",
                    "title" : "func logSumExp(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/product(_:keepdims:stream:)",
                    "title" : "func product(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/product(_:axis:keepdims:stream:)",
                    "title" : "func product(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/product(_:axes:keepdims:stream:)",
                    "title" : "func product(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/max(_:keepdims:stream:)",
                    "title" : "func max(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/max(_:axis:keepdims:stream:)",
                    "title" : "func max(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/max(_:axes:keepdims:stream:)",
                    "title" : "func max(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mean(_:keepdims:stream:)",
                    "title" : "func mean(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mean(_:axis:keepdims:stream:)",
                    "title" : "func mean(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mean(_:axes:keepdims:stream:)",
                    "title" : "func mean(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/min(_:keepdims:stream:)",
                    "title" : "func min(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/min(_:axis:keepdims:stream:)",
                    "title" : "func min(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/min(_:axes:keepdims:stream:)",
                    "title" : "func min(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/sum(_:keepdims:stream:)",
                    "title" : "func sum(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/sum(_:axis:keepdims:stream:)",
                    "title" : "func sum(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/sum(_:axes:keepdims:stream:)",
                    "title" : "func sum(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/variance(_:keepdims:ddof:stream:)",
                    "title" : "func variance(MLXArray, keepDims: Bool, ddof: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/variance(_:axis:keepdims:ddof:stream:)",
                    "title" : "func variance(MLXArray, axis: Int, keepDims: Bool, ddof: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  },
                  {
                    "path" : "\/documentation\/mlx\/variance(_:axes:keepdims:ddof:stream:)",
                    "title" : "func variance(MLXArray, axes: [Int], keepDims: Bool, ddof: Int, stream: StreamOrDevice) -> MLXArray",
                    "type" : "func"
                  }
                ],
                "path" : "\/documentation\/mlx\/reduction",
                "title" : "Reduction Functions",
                "type" : "symbol"
              },
              {
                "title" : "Conversion and Data Types",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Conversion Functions",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/astype(_:stream:)-4eqoc",
                    "title" : "func asType<T>(T.Type, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/astype(_:stream:)-6d44y",
                    "title" : "func asType(DType, stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/asarray(_:)",
                    "title" : "func asArray<T>(T.Type) -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/asimaginary(stream:)",
                    "title" : "func asImaginary(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/imaginarypart(stream:)",
                    "title" : "func imaginaryPart(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/realpart(stream:)",
                    "title" : "func realPart(stream: StreamOrDevice) -> MLXArray",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/mlx\/conversion",
                "title" : "Conversion",
                "type" : "symbol"
              },
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/-(_:_:)-7frdo",
                "title" : "static func - (MLXArray, MLXArray) -> MLXArray",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/-(_:_:)-971j0",
                "title" : "static func - <T>(T, MLXArray) -> MLXArray",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/-(_:_:)-9mf3",
                "title" : "static func - <T>(MLXArray, T) -> MLXArray",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/\/(_:_:)-24oh0",
                "title" : "static func \/ <T>(MLXArray, T) -> MLXArray",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/\/(_:_:)-6ijef",
                "title" : "static func \/ (MLXArray, MLXArray) -> MLXArray",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/\/(_:_:)-7cmtz",
                "title" : "static func \/ <T>(T, MLXArray) -> MLXArray",
                "type" : "op"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/ctx",
                "title" : "var ctx: mlx_array",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/dtype",
                "title" : "var dtype: DType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/itemsize",
                "title" : "var itemSize: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/nbytes",
                "title" : "var nbytes: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/ndim",
                "title" : "var ndim: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/size",
                "title" : "var size: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/strides",
                "title" : "var strides: [Int]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/copy()",
                "title" : "func copy() -> MLXArray",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/eval()",
                "title" : "func eval()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/item()",
                "title" : "func item<T>() -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/item(_:)",
                "title" : "func item<T>(T.Type) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/take(_:stream:)",
                "title" : "func take(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/mlxarray\/update(_:)",
                "title" : "func update(MLXArray)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/mlx\/mlxarray\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/init(arrayliteral:)",
                    "title" : "convenience init(arrayLiteral: Int32...)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/mlx\/mlxarray\/expressiblebyarrayliteral-implementations",
                "title" : "ExpressibleByArrayLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/asmlxarray(dtype:)",
                    "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/mlx\/mlxarray\/scalarorarray-implementations",
                "title" : "ScalarOrArray Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/filter(_:)-5hna4",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/filter(_:)-7z3ih",
                    "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/flatmap(_:)-1ghyp",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/flatmap(_:)-nya7",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/makeiterator()",
                    "title" : "func makeIterator() -> some IteratorProtocol<MLXArray>\n",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/map(_:)",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/sorted(using:)-24lgs",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/sorted(using:)-91uyg",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/mlx\/mlxarray\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/mlxarray\/innerstate()",
                    "title" : "func innerState() -> [MLXArray]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/mlx\/mlxarray\/updatable-implementations",
                "title" : "Updatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/mlx\/mlxarray",
            "title" : "MLXArray",
            "type" : "class"
          },
          {
            "title" : "Free Functions",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Element-wise Arithmetic Free Functions",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/abs(_:stream:)",
                "title" : "func abs(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/acos(_:stream:)",
                "title" : "func acos(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/acosh(_:stream:)",
                "title" : "func acosh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/add(_:_:stream:)",
                "title" : "func add<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/asin(_:stream:)",
                "title" : "func asin(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/asinh(_:stream:)",
                "title" : "func asinh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/atan(_:stream:)",
                "title" : "func atan(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/atanh(_:stream:)",
                "title" : "func atanh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/ceil(_:stream:)",
                "title" : "func ceil(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/clip(_:min:max:stream:)",
                "title" : "func clip(MLXArray, min: MLXArray, max: MLXArray?, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/clip(_:max:stream:)",
                "title" : "func clip(MLXArray, max: MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/cos(_:stream:)",
                "title" : "func cos(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/cosh(_:stream:)",
                "title" : "func cosh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/divide(_:_:stream:)",
                "title" : "func divide<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/erf(_:stream:)",
                "title" : "func erf(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/erfinverse(_:stream:)",
                "title" : "func erfInverse(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/exp(_:stream:)",
                "title" : "func exp(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/floor(_:stream:)",
                "title" : "func floor(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/floordivide(_:_:stream:)",
                "title" : "func floorDivide<T>(MLXArray, T, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/log(_:stream:)",
                "title" : "func log(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/log10(_:stream:)",
                "title" : "func log10(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/log1p(_:stream:)",
                "title" : "func log1p(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/log2(_:stream:)",
                "title" : "func log2(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/logaddexp(_:_:stream:)",
                "title" : "func logAddExp<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/logicalnot(_:stream:)",
                "title" : "func logicalNot(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/matmul(_:_:stream:)",
                "title" : "func matmul(MLXArray, MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/maximum(_:_:stream:)",
                "title" : "func maximum<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/minimum(_:_:stream:)",
                "title" : "func minimum<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/multiply(_:_:stream:)",
                "title" : "func multiply<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/negative(_:stream:)",
                "title" : "func negative(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/notequal(_:_:stream:)",
                "title" : "func notEqual<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/pow(_:_:stream:)-7pe7j",
                "title" : "func pow<T>(MLXArray, T, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/pow(_:_:stream:)-49xi0",
                "title" : "func pow<T>(T, MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/pow(_:_:stream:)-8ie9c",
                "title" : "func pow(MLXArray, MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/reciprocal(_:stream:)",
                "title" : "func reciprocal(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/remainder(_:_:stream:)",
                "title" : "func remainder<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/round(_:decimals:stream:)",
                "title" : "func round(MLXArray, decimals: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/rsqrt(_:stream:)",
                "title" : "func rsqrt(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/sigmoid(_:stream:)",
                "title" : "func sigmoid(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/sign(_:stream:)",
                "title" : "func sign(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/sin(_:stream:)",
                "title" : "func sin(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/sinh(_:stream:)",
                "title" : "func sinh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/softmax(_:stream:)",
                "title" : "func softMax(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/softmax(_:axis:stream:)",
                "title" : "func softMax(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/softmax(_:axes:stream:)",
                "title" : "func softMax(MLXArray, axes: [Int], stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/sqrt(_:stream:)",
                "title" : "func sqrt(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/square(_:stream:)",
                "title" : "func square(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/subtract(_:_:stream:)",
                "title" : "func subtract<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/tan(_:stream:)",
                "title" : "func tan(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/tanh(_:stream:)",
                "title" : "func tanh(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/which(_:_:_:stream:)",
                "title" : "func which<A, B>(MLXArray, A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "title" : "Convolution",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/conv1d(_:_:stride:padding:dilation:groups:stream:)",
                "title" : "func conv1d(MLXArray, MLXArray, stride: Int, padding: Int, dilation: Int, groups: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/conv2d(_:_:stride:padding:dilation:groups:stream:)",
                "title" : "func conv2d(MLXArray, MLXArray, stride: IntOrPair, padding: IntOrPair, dilation: IntOrPair, groups: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/convolve(_:_:mode:stream:)",
                "title" : "func convolve<A, B>(A, B, mode: ConvolveMode, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "title" : "Cumulative",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/cummax(_:axis:reverse:inclusive:stream:)",
                "title" : "func cummax(MLXArray, axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/cummax(_:reverse:inclusive:stream:)",
                "title" : "func cummax(MLXArray, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/cummin(_:axis:reverse:inclusive:stream:)",
                "title" : "func cummin(MLXArray, axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/cummin(_:reverse:inclusive:stream:)",
                "title" : "func cummin(MLXArray, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/cumprod(_:axis:reverse:inclusive:stream:)",
                "title" : "func cumprod(MLXArray, axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/cumprod(_:reverse:inclusive:stream:)",
                "title" : "func cumprod(MLXArray, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/cumsum(_:axis:reverse:inclusive:stream:)",
                "title" : "func cumsum(MLXArray, axis: Int, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/cumsum(_:reverse:inclusive:stream:)",
                "title" : "func cumsum(MLXArray, reverse: Bool, inclusive: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "title" : "Indexes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/argmax(_:axis:keepdims:stream:)",
                "title" : "func argMax(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/argmax(_:keepdims:stream:)",
                "title" : "func argMax(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/argmin(_:axis:keepdims:stream:)",
                "title" : "func argMin(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/argmin(_:keepdims:stream:)",
                "title" : "func argMin(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/argpartition(_:kth:axis:stream:)",
                "title" : "func argPartition(MLXArray, kth: Int, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/argpartition(_:kth:stream:)",
                "title" : "func argPartition(MLXArray, kth: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/argsort(_:axis:stream:)",
                "title" : "func argSort(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/argsort(_:stream:)",
                "title" : "func argSort(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/takealong(_:_:axis:stream:)",
                "title" : "func takeAlong(MLXArray, MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/takealong(_:_:stream:)",
                "title" : "func takeAlong(MLXArray, MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/take(_:_:stream:)",
                "title" : "func take(MLXArray, MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/take(_:_:axis:stream:)",
                "title" : "func take(MLXArray, MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/top(_:k:stream:)",
                "title" : "func top(MLXArray, k: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/top(_:k:axis:stream:)",
                "title" : "func top(MLXArray, k: Int, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "title" : "Factory",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/zeros(_:type:stream:)",
                "title" : "func zeros<T>([Int], type: T.Type, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/zeros(like:stream:)",
                "title" : "func zeros(like: MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/ones(_:type:stream:)",
                "title" : "func ones<T>([Int], type: T.Type, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/ones(like:stream:)",
                "title" : "func ones(like: MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/eye(_:m:k:type:stream:)",
                "title" : "func eye<T>(Int, m: Int?, k: Int, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/full(_:values:type:stream:)",
                "title" : "func full<T>([Int], values: MLXArray, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/full(_:values:stream:)",
                "title" : "func full([Int], values: MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/identity(_:type:stream:)",
                "title" : "func identity<T>(Int, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/linspace(_:_:count:stream:)-7vj0o",
                "title" : "func linspace<T>(T, T, count: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/linspace(_:_:count:stream:)-6w959",
                "title" : "func linspace<T>(T, T, count: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/repeat(_:count:axis:stream:)",
                "title" : "func `repeat`(MLXArray, count: Int, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/repeat(_:count:stream:)",
                "title" : "func `repeat`(MLXArray, count: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/tri(_:m:k:type:stream:)",
                "title" : "func tri<T>(Int, m: Int?, k: Int, type: T.Type, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/tril(_:k:stream:)",
                "title" : "func tril(MLXArray, k: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/triu(_:k:stream:)",
                "title" : "func triu(MLXArray, k: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "title" : "I\/O",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/loadarray(url:stream:)",
                "title" : "func loadArray(url: URL, stream: StreamOrDevice) throws -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/loadarrays(url:stream:)",
                "title" : "func loadArrays(url: URL, stream: StreamOrDevice) throws -> [String : MLXArray]",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/save(array:url:stream:)",
                "title" : "func save(array: MLXArray, url: URL, stream: StreamOrDevice) throws",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/save(arrays:url:stream:)",
                "title" : "func save(arrays: [String : MLXArray], url: URL, stream: StreamOrDevice) throws",
                "type" : "func"
              },
              {
                "title" : "Logical",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/all(_:axes:keepdims:stream:)",
                "title" : "func all(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/all(_:keepdims:stream:)",
                "title" : "func all(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/all(_:axis:keepdims:stream:)",
                "title" : "func all(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/allclose(_:_:rtol:atol:equalnan:stream:)",
                "title" : "func allClose<T>(MLXArray, T, rtol: Double, atol: Double, equalNaN: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/any(_:axes:keepdims:stream:)",
                "title" : "func any(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/any(_:keepdims:stream:)",
                "title" : "func any(MLXArray, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/any(_:axis:keepdims:stream:)",
                "title" : "func any(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/arrayequal(_:_:equalnan:stream:)",
                "title" : "func arrayEqual<T>(MLXArray, T, equalNAN: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/equal(_:_:stream:)",
                "title" : "func equal<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/greater(_:_:stream:)",
                "title" : "func greater<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/greaterequal(_:_:stream:)",
                "title" : "func greaterEqual<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/less(_:_:stream:)",
                "title" : "func less<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/lessequal(_:_:stream:)",
                "title" : "func lessEqual<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/logicalnot(_:stream:)",
                "title" : "func logicalNot(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/notequal(_:_:stream:)",
                "title" : "func notEqual<A, B>(A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/where(_:_:_:stream:)",
                "title" : "func `where`<A, B>(MLXArray, A, B, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "title" : "Logical Reduction",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/all(_:axes:keepdims:stream:)",
                "title" : "func all(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/any(_:axes:keepdims:stream:)",
                "title" : "func any(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "title" : "Aggregating Reduction",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/logsumexp(_:axes:keepdims:stream:)",
                "title" : "func logSumExp(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/product(_:axis:keepdims:stream:)",
                "title" : "func product(MLXArray, axis: Int, keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/max(_:axes:keepdims:stream:)",
                "title" : "func max(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/mean(_:axes:keepdims:stream:)",
                "title" : "func mean(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/min(_:axes:keepdims:stream:)",
                "title" : "func min(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/sum(_:axes:keepdims:stream:)",
                "title" : "func sum(MLXArray, axes: [Int], keepDims: Bool, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/variance(_:axes:keepdims:ddof:stream:)",
                "title" : "func variance(MLXArray, axes: [Int], keepDims: Bool, ddof: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "title" : "Shapes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/asstrided(_:_:strides:offset:stream:)",
                "title" : "func asStrided(MLXArray, [Int]?, strides: [Int]?, offset: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/broadcast(_:to:stream:)",
                "title" : "func broadcast(MLXArray, to: [Int], stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/concatenated(_:axis:stream:)",
                "title" : "func concatenated([MLXArray], axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/expandeddimensions(_:axes:stream:)",
                "title" : "func expandedDimensions(MLXArray, axes: [Int], stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/expandeddimensions(_:axis:stream:)",
                "title" : "func expandedDimensions(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/movedaxis(_:source:destination:stream:)",
                "title" : "func movedAxis(MLXArray, source: Int, destination: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/padded(_:width:value:stream:)",
                "title" : "func padded(MLXArray, width: IntOrPair, value: MLXArray?, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/padded(_:widths:value:stream:)",
                "title" : "func padded(MLXArray, widths: [IntOrPair], value: MLXArray?, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/reshaped(_:_:stream:)-5x3y0",
                "title" : "func reshaped(MLXArray, [Int], stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/reshaped(_:_:stream:)-96lgr",
                "title" : "func reshaped(MLXArray, Int..., stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/split(_:indices:axis:stream:)",
                "title" : "func split(MLXArray, indices: [Int], axis: Int, stream: StreamOrDevice) -> [MLXArray]",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/split(_:parts:axis:stream:)",
                "title" : "func split(MLXArray, parts: Int, axis: Int, stream: StreamOrDevice) -> [MLXArray]",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/squeezed(_:stream:)",
                "title" : "func squeezed(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/squeezed(_:axis:stream:)",
                "title" : "func squeezed(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/squeezed(_:axes:stream:)",
                "title" : "func squeezed(MLXArray, axes: [Int], stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/stacked(_:axis:stream:)",
                "title" : "func stacked([MLXArray], axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/swappedaxes(_:_:_:stream:)",
                "title" : "func swappedAxes(MLXArray, Int, Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/transposed(_:stream:)",
                "title" : "func transposed(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/transposed(_:axis:stream:)",
                "title" : "func transposed(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/transposed(_:axes:stream:)",
                "title" : "func transposed(MLXArray, axes: [Int], stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/transposed(_:_:stream:)",
                "title" : "func transposed(MLXArray, Int..., stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/t(_:stream:)",
                "title" : "func T(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "title" : "Sorting",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/argsort(_:axis:stream:)",
                "title" : "func argSort(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/argpartition(_:kth:axis:stream:)",
                "title" : "func argPartition(MLXArray, kth: Int, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/sorted(_:stream:)",
                "title" : "func sorted(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/sorted(_:axis:stream:)",
                "title" : "func sorted(MLXArray, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/partitioned(_:kth:stream:)",
                "title" : "func partitioned(MLXArray, kth: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/partitioned(_:kth:axis:stream:)",
                "title" : "func partitioned(MLXArray, kth: Int, axis: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "title" : "Quantization",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/quantized(_:groupsize:bits:stream:)",
                "title" : "func quantized(MLXArray, groupSize: Int, bits: Int, stream: StreamOrDevice) -> (wq: MLXArray, scales: MLXArray, biases: MLXArray)",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/quantizedmatmul(_:_:scales:biases:transpose:groupsize:bits:stream:)",
                "title" : "func quantizedMatmul(MLXArray, MLXArray, scales: MLXArray, biases: MLXArray, transpose: Bool, groupSize: Int, bits: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/dequantized(_:scales:biases:groupsize:bits:stream:)",
                "title" : "func dequantized(MLXArray, scales: MLXArray, biases: MLXArray, groupSize: Int, bits: Int, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "title" : "Evaluation and Transformation",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/eval(_:)-190w1",
                "title" : "func eval([Any])",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/eval(_:)-3b2g9",
                "title" : "func eval(Any...)",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/eval(_:)-8fexv",
                "title" : "func eval([MLXArray])",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/eval(_:)-91pbd",
                "title" : "func eval(MLXArray...)",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/grad(_:)-r8dv",
                "title" : "func grad((MLXArray) -> MLXArray) -> (MLXArray) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/grad(_:)-7z6i",
                "title" : "func grad((MLXArray) -> [MLXArray]) -> (MLXArray) -> [MLXArray]",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/grad(_:argumentnumbers:)-2ictk",
                "title" : "func grad(([MLXArray]) -> MLXArray, argumentNumbers: [Int]) -> ([MLXArray]) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/grad(_:argumentnumbers:)-5va2g",
                "title" : "func grad(([MLXArray]) -> [MLXArray], argumentNumbers: [Int]) -> ([MLXArray]) -> [MLXArray]",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/valueandgrad(_:)",
                "title" : "func valueAndGrad<T>((NestedDictionary<String, MLXArray>, T) -> [MLXArray]) -> (NestedDictionary<String, MLXArray>, T) -> ([MLXArray], NestedDictionary<String, MLXArray>)",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/valueandgrad(_:argumentnumbers:)",
                "title" : "func valueAndGrad(([MLXArray]) -> [MLXArray], argumentNumbers: [Int]) -> ([MLXArray]) -> ([MLXArray], [MLXArray])",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/stopgradient(_:stream:)",
                "title" : "func stopGradient(MLXArray, stream: StreamOrDevice) -> MLXArray",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/jvp(_:primals:tangents:)",
                "title" : "func jvp(([MLXArray]) -> [MLXArray], primals: [MLXArray], tangents: [MLXArray]) -> ([MLXArray], [MLXArray])",
                "type" : "func"
              },
              {
                "path" : "\/documentation\/mlx\/vjp(_:primals:cotangents:)",
                "title" : "func vjp(([MLXArray]) -> [MLXArray], primals: [MLXArray], cotangents: [MLXArray]) -> ([MLXArray], [MLXArray])",
                "type" : "func"
              }
            ],
            "path" : "\/documentation\/mlx\/free-functions",
            "title" : "Free Functions",
            "type" : "symbol"
          },
          {
            "title" : "Data Types",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/bfloat16",
                "title" : "case bfloat16",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/bool",
                "title" : "case bool",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/complex64",
                "title" : "case complex64",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/float16",
                "title" : "case float16",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/float32",
                "title" : "case float32",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/int16",
                "title" : "case int16",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/int32",
                "title" : "case int32",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/int64",
                "title" : "case int64",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/int8",
                "title" : "case int8",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/uint16",
                "title" : "case uint16",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/uint32",
                "title" : "case uint32",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/uint64",
                "title" : "case uint64",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/uint8",
                "title" : "case uint8",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/cmlxdtype",
                "title" : "var cmlxDtype: mlx_array_dtype",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/iscomplex",
                "title" : "var isComplex: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/dtype\/isfloatingpoint",
                "title" : "var isFloatingPoint: Bool",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/dtype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/mlx\/dtype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/mlx\/dtype",
            "title" : "DType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/hasdtype\/dtype",
                "title" : "static var dtype: DType",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/mlx\/hasdtype",
            "title" : "HasDType",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/mlx\/scalarorarray\/asmlxarray(dtype:)-14eqb",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "title" : "ScalarOrArray Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/mlx\/scalarorarray\/asmlxarray(dtype:)-v238",
                "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlx\/scalarorarray",
            "title" : "ScalarOrArray",
            "type" : "protocol"
          },
          {
            "title" : "Nested Data",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/init(item:)",
                "title" : "init(item: NestedItem<Key, Element>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/init(values:)",
                "title" : "init(values: [Key : NestedItem<Key, Element>])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/keys",
                "title" : "var keys: Dictionary<Key, NestedItem<Key, Element>>.Keys",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/values",
                "title" : "var values: Dictionary<Key, NestedItem<Key, Element>>.Values",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/asdictionary()",
                "title" : "func asDictionary() -> [Key : Any?]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/asitem()",
                "title" : "func asItem() -> NestedItem<Key, Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/compactmapvalues(transform:)",
                "title" : "func compactMapValues<Result>(transform: (Element) throws -> Result?) rethrows -> NestedDictionary<Key, Result>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/flattened(prefix:)",
                "title" : "func flattened(prefix: String?) -> [(String, Element)]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/flattenedvalues()",
                "title" : "func flattenedValues() -> [Element]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/mapvalues(_:_:transform:)-52e9l",
                "title" : "func mapValues<E2, E3, R1, R2>(NestedDictionary<Key, E2>, NestedDictionary<Key, E3>, transform: (Element, E2?, E3?) -> (R1, R2?)) -> (NestedDictionary<Key, R1>, NestedDictionary<Key, R2>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/mapvalues(_:_:transform:)-8yhzk",
                "title" : "func mapValues<E2, E3, R1, R2, R3>(NestedDictionary<Key, E2>, NestedDictionary<Key, E3>, transform: (Element, E2?, E3?) throws -> (R1, R2?, R3?)) rethrows -> (NestedDictionary<Key, R1>, NestedDictionary<Key, R2>, NestedDictionary<Key, R3>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/mapvalues(_:transform:)-4ctis",
                "title" : "func mapValues<E2, R1>(NestedDictionary<Key, E2>, transform: (Element, E2?) -> R1) -> NestedDictionary<Key, R1>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/mapvalues(_:transform:)-54sj2",
                "title" : "func mapValues<E2, R1, R2>(NestedDictionary<Key, E2>, transform: (Element, E2?) throws -> (R1, R2?)) rethrows -> (NestedDictionary<Key, R1>, NestedDictionary<Key, R2>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/mapvalues(transform:)",
                "title" : "func mapValues<Result>(transform: (Element) throws -> Result) rethrows -> NestedDictionary<Key, Result>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/replacingvalues(with:)",
                "title" : "func replacingValues(with: [Element]) -> NestedDictionary<Key, Element>",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/subscript(_:)-7bphj",
                "title" : "subscript(Key) -> NestedItem<Key, Element>?",
                "type" : "subscript"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/subscript(unwrapping:)",
                "title" : "subscript(unwrapping _: Key) -> Element?",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/collectionelement",
                "title" : "NestedDictionary.CollectionElement",
                "type" : "typealias"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/unflattened(_:)-4p8bn",
                "title" : "static func unflattened([Key : Element]) -> NestedDictionary<String, Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteddictionary\/unflattened(_:)-7xuiv",
                "title" : "static func unflattened([(Key, Element)]) -> NestedDictionary<String, Element>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/endindex",
                    "title" : "var endIndex: NestedDictionary<Key, Element>.Index",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/indices",
                    "title" : "var indices: DefaultIndices<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/startindex",
                    "title" : "var startIndex: NestedDictionary<Key, Element>.Index",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/distance(from:to:)",
                    "title" : "func distance(from: Self.Index, to: Self.Index) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/formindex(after:)",
                    "title" : "func formIndex(after: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/index(_:offsetby:)",
                    "title" : "func index(Self.Index, offsetBy: Int) -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/index(after:)",
                    "title" : "func index(after: NestedDictionary<Key, Element>.Index) -> NestedDictionary<Key, Element>.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/map(_:)-2a26y",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/subscript(_:)-27we2",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/subscript(_:)-4t8fg",
                    "title" : "subscript(NestedDictionary<Key, Element>.Index) -> NestedDictionary<Key, Element>.CollectionElement",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/subscript(_:)-5jt9z",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/subscript(_:)-6pveg",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/index",
                    "title" : "NestedDictionary.Index",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/mlx\/nesteddictionary\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/mlx\/nesteddictionary\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/filter(_:)-57rkj",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/filter(_:)-7p1dh",
                    "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/flatmap(_:)-73boo",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/flatmap(_:)-9881n",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/map(_:)-46m52",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/sorted(using:)-2xway",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/sorted(using:)-5led6",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteddictionary\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/mlx\/nesteddictionary\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/mlx\/nesteddictionary",
            "title" : "NestedDictionary",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/array(_:)",
                "title" : "case array([NestedItem<Key, Element>])",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/dictionary(_:)",
                "title" : "case dictionary([Key : NestedItem<Key, Element>])",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/none",
                "title" : "case none",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/value(_:)",
                "title" : "case value(Element)",
                "type" : "case"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/compactmapvalues(_:)",
                "title" : "func compactMapValues<Result>((Element) throws -> Result?) rethrows -> NestedItem<Key, Result>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/description(indent:)",
                "title" : "func description(indent: Int) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/flattened(prefix:)",
                "title" : "func flattened(prefix: String?) -> [(String, Element)]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/flattenedvalues()",
                "title" : "func flattenedValues() -> [Element]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/mapvalues(_:)",
                "title" : "func mapValues<Result>((Element) throws -> Result) rethrows -> NestedItem<Key, Result>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/mapvalues(_:_:)",
                "title" : "func mapValues<E2, R1, R2>(NestedItem<Key, E2>, (Element, E2?) throws -> (R1, R2?)) rethrows -> (NestedItem<Key, R1>, NestedItem<Key, R2>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/mapvalues(_:_:_:)",
                "title" : "func mapValues<E2, E3, R1, R2, R3>(NestedItem<Key, E2>, NestedItem<Key, E3>, (Element, E2?, E3?) throws -> (R1, R2?, R3?)) rethrows -> (NestedItem<Key, R1>, NestedItem<Key, R2>, NestedItem<Key, R3>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/unwrap()",
                "title" : "func unwrap() -> Any?",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/nesteditem\/unflattened(_:)",
                "title" : "static func unflattened([(Key, Element)]) -> NestedItem<Key, Element>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteditem\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/mlx\/nesteditem\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/nesteditem\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/mlx\/nesteditem\/indenteddescription-implementations",
                "title" : "IndentedDescription Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/mlx\/nesteditem",
            "title" : "NestedItem",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/indenteddescription\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/indenteddescription\/description(indent:)",
                "title" : "func description(indent: Int) -> String",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlx\/indenteddescription",
            "title" : "IndentedDescription",
            "type" : "protocol"
          },
          {
            "title" : "Streams and Devices",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/streamordevice\/ctx",
                "title" : "var ctx: OpaquePointer",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/streamordevice\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/streamordevice\/cpu",
                "title" : "static let cpu: StreamOrDevice",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/streamordevice\/default",
                "title" : "static var `default`: StreamOrDevice",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/streamordevice\/gpu",
                "title" : "static let gpu: StreamOrDevice",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/streamordevice\/device(_:)",
                "title" : "static func device(Device) -> StreamOrDevice",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/streamordevice\/stream(_:)",
                "title" : "static func stream(Stream) -> StreamOrDevice",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlx\/streamordevice",
            "title" : "StreamOrDevice",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/device\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/mlx\/device\/init(_:index:)",
                "title" : "init(DeviceType, index: Int32)",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/device\/cpu",
                "title" : "static let cpu: Device",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/device\/gpu",
                "title" : "static let gpu: Device",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/device\/defaultdevice()",
                "title" : "static func defaultDevice() -> Device",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlx\/device\/setdefault(device:)",
                "title" : "static func setDefault(device: Device)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/device\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/mlx\/device\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/mlx\/device",
            "title" : "Device",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/devicetype\/cpu",
                "title" : "case cpu",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/devicetype\/gpu",
                "title" : "case gpu",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/devicetype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/devicetype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/mlx\/devicetype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/devicetype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/devicetype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/mlx\/devicetype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/mlx\/devicetype",
            "title" : "DeviceType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/stream\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/mlx\/stream\/init(index:_:)",
                "title" : "init(index: Int32, Device)",
                "type" : "init"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/stream\/defaultstream(_:)",
                "title" : "static func defaultStream(Device) -> Stream",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/stream\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/mlx\/stream\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/mlx\/stream",
            "title" : "Stream",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/evaluatable\/innerstate()",
                "title" : "func innerState() -> [MLXArray]",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlx\/evaluatable",
            "title" : "Evaluatable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/updatable\/innerstate()",
                "title" : "func innerState() -> [MLXArray]",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlx\/updatable",
            "title" : "Updatable",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/intorpair\/init(_:)-4gcmc",
                "title" : "init((Int, Int))",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/mlx\/intorpair\/init(_:)-78yd3",
                "title" : "init([Int])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/mlx\/intorpair\/init(arrayliteral:)",
                "title" : "init(arrayLiteral: Int...)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/mlx\/intorpair\/init(integerliteral:)",
                "title" : "init(integerLiteral: Int)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/intorpair\/first",
                "title" : "var first: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/intorpair\/second",
                "title" : "var second: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/mlx\/intorpair\/values",
                "title" : "let values: (Int, Int)",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/mlx\/intorpair",
            "title" : "IntOrPair",
            "type" : "struct"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlx\/convolvemode\/full",
                "title" : "case full",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/convolvemode\/same",
                "title" : "case same",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/mlx\/convolvemode\/valid",
                "title" : "case valid",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlx\/convolvemode\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/mlx\/convolvemode\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/mlx\/convolvemode",
            "title" : "ConvolveMode",
            "type" : "enum"
          },
          {
            "title" : "Extended Modules",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Extended Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/complexmodule\/complex\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/complexmodule\/complex\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/complexmodule\/complex\/asmlxarray(dtype:)-2x838",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/mlx\/complexmodule\/complex\/asmlxarray(dtype:)-9j3cr",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/complexmodule\/complex\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/complexmodule\/complex",
                "title" : "Complex",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/mlx\/complexmodule",
            "title" : "ComplexModule",
            "type" : "extension"
          },
          {
            "children" : [
              {
                "title" : "Extended Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/array\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/array\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/array\/innerstate()",
                        "title" : "func innerState() -> [MLXArray]",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/array\/updatable-implementations",
                    "title" : "Updatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/array",
                "title" : "Array",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/bool\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/bool\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/bool\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/bool\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/bool",
                "title" : "Bool",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/double\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/double\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/double",
                "title" : "Double",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/float\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/float\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/float\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/float\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/float",
                "title" : "Float",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/float16\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/float16\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/float16\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/float16\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/float16",
                "title" : "Float16",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/int\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/int\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/int\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/int\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/int",
                "title" : "Int",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/int16\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/int16\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/int16\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/int16\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/int16",
                "title" : "Int16",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/int32\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/int32\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/int32\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/int32\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/int32",
                "title" : "Int32",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/int64\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/int64\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/int64\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/int64\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/int64",
                "title" : "Int64",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/int8\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/int8\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/int8\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/int8\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/int8",
                "title" : "Int8",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/uint16\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/uint16\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/uint16\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/uint16\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/uint16",
                "title" : "UInt16",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/uint32\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/uint32\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/uint32\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/uint32\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/uint32",
                "title" : "UInt32",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/uint64\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/uint64\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/uint64\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/uint64\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/uint64",
                "title" : "UInt64",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/uint8\/dtype",
                        "title" : "static var dtype: DType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/uint8\/hasdtype-implementations",
                    "title" : "HasDType Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/mlx\/swift\/uint8\/asmlxarray(dtype:)",
                        "title" : "func asMLXArray(dtype: DType?) -> MLXArray",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/mlx\/swift\/uint8\/scalarorarray-implementations",
                    "title" : "ScalarOrArray Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/mlx\/swift\/uint8",
                "title" : "UInt8",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/mlx\/swift",
            "title" : "Swift",
            "type" : "extension"
          }
        ],
        "path" : "\/documentation\/mlx",
        "title" : "MLX",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 1
  }
}